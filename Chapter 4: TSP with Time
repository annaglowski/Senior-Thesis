{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cd9542d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import csv\n",
    "import os\n",
    "import numpy as np\n",
    "import gurobipy as gp\n",
    "from gurobipy import LinExpr, GRB\n",
    "from itertools import permutations\n",
    "from itertools import combinations\n",
    "import googlemaps as gmaps\n",
    "from datetime import datetime\n",
    "\n",
    "\n",
    "gmaps = gmaps.Client(key='AIzaSyCj9WXbWgWhC7vViX5nbPDr7dkd9y5PjZw')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "487a618d",
   "metadata": {},
   "source": [
    "-------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "345635c4",
   "metadata": {},
   "source": [
    "## Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "8208d038",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Fomulate ride, wait and distance constants\n",
    "\n",
    "import re\n",
    "\n",
    "capitals = ['Entrance', 'Its a Small World', 'Space Mountain', 'Star Wars: Rise of Resistance', 'Indiana Jones Adventure', \n",
    "         'Pirates of the Caribbean', 'Splash Mountain', 'Big Thunder Mountain Railway', 'Matterhorn Bobsleds', 'Exit']\n",
    "\n",
    "capitals_minus = ['Its a Small World', 'Space Mountain', 'Star Wars: Rise of Resistance', 'Indiana Jones Adventure', \n",
    "         'Pirates of the Caribbean', 'Splash Mountain', 'Big Thunder Mountain Railway', 'Matterhorn Bobsleds']\n",
    "\n",
    "\n",
    "# Average wait time\n",
    "av_wt = [0,\n",
    " 14.176750419333157,\n",
    " 49.2742706178715,\n",
    " 100.52732538989471,\n",
    " 42.74889237079236,\n",
    " 23.366666395373894,\n",
    " 30.709718187729766,\n",
    " 33.67079740724337,\n",
    " 37.825957101015725,\n",
    "        0]\n",
    "\n",
    "# Ride Time\n",
    "ride = [0, 14, 5, 18, 10, 10, 11, 3.5, 4, 0]\n",
    "\n",
    "# Create Dictionaries for wait and ride time\n",
    "wait = {}\n",
    "ride_time = {}\n",
    "\n",
    "for i in range(0,10):\n",
    "    wait[capitals[i]] = av_wt[i]\n",
    "    ride_time[capitals[i]] = ride[i]\n",
    "    \n",
    "    \n",
    "# DISTANCE MATRIX\n",
    "\n",
    "distance_matrix = pd.read_csv('distance_matrix.csv',index_col=0)\n",
    "\n",
    "# convert to dictionary\n",
    "dist = {(row['Origin'], row['Destination']): row['Walk Time'] for _, row in distance_matrix.iterrows()}\n",
    "\n",
    "# make matching origin and destinations larger\n",
    "for key,value in dist.items():\n",
    "    if key[0] == key[1]:\n",
    "        dist[key] = 100\n",
    "\n",
    "# Special Case for the double entrance value\n",
    "dist['Entrance', 'Exit'] = 100\n",
    "dist['Exit', 'Entrance'] = 100"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4a6b32f",
   "metadata": {},
   "source": [
    "-------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1d961ec",
   "metadata": {},
   "source": [
    "## Problem Formulation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c3ab0610",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Set parameter Username\n",
      "Academic license - for non-commercial use only - expires 2024-02-29\n"
     ]
    }
   ],
   "source": [
    "import gurobipy as gp\n",
    "from gurobipy import LinExpr, GRB\n",
    "\n",
    "m = gp.Model()\n",
    "\n",
    "# [Parameter] large number double that of the ub on time\n",
    "M = 2000\n",
    "\n",
    "# [Parameter] 16 hours of park opening\n",
    "T = 960\n",
    "\n",
    "\n",
    "\n",
    "# [Variable] Arch connections: is ride 'i' adjacent to ride 'j' on the route?\n",
    "vars = m.addVars(dist.keys(), obj=dist, vtype=GRB.BINARY, name='x')\n",
    "\n",
    "# [Variable] Timestamp: What time does the guest arrive at each ride?\n",
    "t = m.addVars(capitals, lb = 0, ub = T)\n",
    "\n",
    "\n",
    "\n",
    "# [Constraint] Input/Output constraints to create a route with no subtours where all rides visited once\n",
    "for i in capitals:\n",
    "    input = 0\n",
    "    output = 0\n",
    "    # sum across all combinations of pairings\n",
    "    for j in capitals:\n",
    "        if i != j:\n",
    "            input += vars[j, i]\n",
    "            output += vars[i,j]\n",
    "    if i == 'Entrance':\n",
    "        # Entrance should have not input and 1 output\n",
    "        m.addConstr(output == 1)\n",
    "    elif i == 'Exit':\n",
    "        # Exit should have 1 input and no outputs\n",
    "        m.addConstr(input ==1)\n",
    "    else: \n",
    "        # all other rides should have 1 input and 1 output\n",
    "        m.addConstr(input == output)\n",
    "        m.addConstr(input == 1)\n",
    "\n",
    "# [Constraint] total timing: must be less than the total hours of the park\n",
    "m.addConstr(t['Exit']-t['Entrance']<= T)\n",
    "\n",
    "# [Constraint] Start time at 0\n",
    "m.addConstr(t['Entrance'] == 0)\n",
    "\n",
    "# [Constraint] Time must forward\n",
    "for i, j in vars.keys():\n",
    "    if i != j:\n",
    "        m.addConstr(t[j] >= t[i] - M*(1-vars[i, j]) + dist[i, j] + wait[i] + ride_time[i])\n",
    "        \n",
    "        \n",
    "    \n",
    "# [Objective] Set objective to minitize the time guest arrives at Exit and to minimize the walking distance\n",
    "m.ModelSense = GRB.MINIMIZE\n",
    "m.setObjectiveN(t['Exit'], 0)\n",
    "m.setObjectiveN(gp.quicksum(vars[i, j]*dist[i,j] for i, j in vars.keys()), 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4ce24173",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gurobi Optimizer version 9.5.2 build v9.5.2rc0 (mac64[rosetta2])\n",
      "Thread count: 8 physical cores, 8 logical processors, using up to 8 threads\n",
      "Optimize a model with 110 rows, 110 columns and 507 nonzeros\n",
      "Model fingerprint: 0x4fbeb5a3\n",
      "Variable types: 10 continuous, 100 integer (100 binary)\n",
      "Coefficient statistics:\n",
      "  Matrix range     [1e+00, 2e+03]\n",
      "  Objective range  [1e+00, 1e+02]\n",
      "  Bounds range     [1e+00, 1e+03]\n",
      "  RHS range        [1e+00, 2e+03]\n",
      "\n",
      "---------------------------------------------------------------------------\n",
      "Multi-objectives: starting optimization with 2 objectives (1 combined) ...\n",
      "---------------------------------------------------------------------------\n",
      "---------------------------------------------------------------------------\n",
      "\n",
      "Multi-objectives: optimize objective 1 (weighted) ...\n",
      "---------------------------------------------------------------------------\n",
      "\n",
      "Optimize a model with 110 rows, 110 columns and 507 nonzeros\n",
      "Model fingerprint: 0x1a602e27\n",
      "Variable types: 10 continuous, 100 integer (100 binary)\n",
      "Coefficient statistics:\n",
      "  Matrix range     [1e+00, 2e+03]\n",
      "  Objective range  [1e+00, 1e+02]\n",
      "  Bounds range     [1e+00, 1e+03]\n",
      "  RHS range        [1e+00, 2e+03]\n",
      "Presolve removed 11 rows and 20 columns\n",
      "Presolve time: 0.00s\n",
      "Presolved: 99 rows, 90 columns, 698 nonzeros\n",
      "Variable types: 9 continuous, 81 integer (81 binary)\n",
      "Found heuristic solution: objective 489.8003779\n",
      "Found heuristic solution: objective 487.8003779\n",
      "Found heuristic solution: objective 475.8003779\n",
      "\n",
      "Root relaxation: objective 6.390976e+01, 47 iterations, 0.00 seconds (0.00 work units)\n",
      "\n",
      "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
      " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
      "\n",
      "     0     0   63.90976    0   17  475.80038   63.90976  86.6%     -    0s\n",
      "     0     0   73.13915    0   17  475.80038   73.13915  84.6%     -    0s\n",
      "H    0     0                     471.8003779   73.13915  84.5%     -    0s\n",
      "     0     0   73.65595    0   19  471.80038   73.65595  84.4%     -    0s\n",
      "     0     0   75.43601    0   25  471.80038   75.43601  84.0%     -    0s\n",
      "     0     0   76.45606    0   15  471.80038   76.45606  83.8%     -    0s\n",
      "     0     0   77.40985    0   22  471.80038   77.40985  83.6%     -    0s\n",
      "     0     0   77.63150    0   22  471.80038   77.63150  83.5%     -    0s\n",
      "     0     0   78.03317    0   22  471.80038   78.03317  83.5%     -    0s\n",
      "     0     0   78.63744    0   22  471.80038   78.63744  83.3%     -    0s\n",
      "     0     0   78.71397    0   17  471.80038   78.71397  83.3%     -    0s\n",
      "     0     2   78.71397    0   17  471.80038   78.71397  83.3%     -    0s\n",
      " 79519  2372     cutoff   54       471.80038  109.69660  76.7%   9.9    5s\n",
      "\n",
      "Cutting planes:\n",
      "  Learned: 11\n",
      "  Gomory: 10\n",
      "  Cover: 2\n",
      "  Implied bound: 5\n",
      "  Projected implied bound: 11\n",
      "  MIR: 47\n",
      "  Flow cover: 128\n",
      "  Inf proof: 18\n",
      "  Zero half: 3\n",
      "  Relax-and-lift: 10\n",
      "\n",
      "Explored 92238 nodes (919661 simplex iterations) in 5.47 seconds (6.67 work units)\n",
      "Thread count was 8 (of 8 available processors)\n",
      "\n",
      "Solution count 4: 471.8 475.8 487.8 489.8 \n",
      "\n",
      "Optimal solution found (tolerance 1.00e-04)\n",
      "Best objective 4.718003778893e+02, best bound 4.718003778893e+02, gap 0.0000%\n",
      "\n",
      "---------------------------------------------------------------------------\n",
      "Multi-objectives: solved in 5.48 seconds (6.67 work units), solution count 4\n",
      "\n"
     ]
    }
   ],
   "source": [
    "m.optimize()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "22b2ee1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "vals = m.getAttr('x', vars)\n",
    "t = m.getAttr('x', t)\n",
    "selected = gp.tuplelist((i, j) for i, j in vals.keys() if vals[i, j] > 0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "369117ce",
   "metadata": {},
   "source": [
    "-------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eeb8d3b0",
   "metadata": {},
   "source": [
    "## Find Full Path"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "1c9a240c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Entrance',\n",
       " 'Space Mountain',\n",
       " 'Matterhorn Bobsleds',\n",
       " 'Its a Small World',\n",
       " 'Star Wars: Rise of Resistance',\n",
       " 'Splash Mountain',\n",
       " 'Pirates of the Caribbean',\n",
       " 'Indiana Jones Adventure',\n",
       " 'Big Thunder Mountain Railway',\n",
       " 'Exit']"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# find path not including Entrance and Exit\n",
    "visited = {}\n",
    "\n",
    "for i in capitals:\n",
    "    visited[i] = 0\n",
    "\n",
    "# Start at Entrance\n",
    "path = []\n",
    "visited['Entrance'] = 1\n",
    "path.append('Entrance')\n",
    "\n",
    "# Where to go from Entrance\n",
    "for i in capitals:\n",
    "        if vals['Entrance', i] == 1:\n",
    "            visited[i] = 1\n",
    "            path.append(i)\n",
    "            break\n",
    "\n",
    "# Continue from Entrance on path stopping before exit\n",
    "while len(path) < 10:\n",
    "    index = len(path) - 1\n",
    "    temp = path[index]\n",
    "    for i in capitals:\n",
    "        if visited[i] == 0:\n",
    "             if vals[temp, i] == 1:\n",
    "                visited[i] = 1\n",
    "                path.append(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a316ea3",
   "metadata": {},
   "source": [
    "-------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a066c51b",
   "metadata": {},
   "source": [
    "## Full Itenerary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "2ad6c9d3",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Entrance': '8:00 am',\n",
       " 'Space Mountain': '8:05 am',\n",
       " 'Matterhorn Bobsleds': '9:02 am',\n",
       " 'Its a Small World': '9:46 am',\n",
       " 'Star Wars: Rise of Resistance': '10:22 am',\n",
       " 'Splash Mountain': '0:23 pm',\n",
       " 'Pirates of the Caribbean': '1:08 pm',\n",
       " 'Indiana Jones Adventure': '1:42 pm',\n",
       " 'Big Thunder Mountain Railway': '2:37 pm',\n",
       " 'Exit': '3:19 pm'}"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# [Timestamp] Print out the timestamp that a guest arrives at each ride on the route\n",
    "import datetime\n",
    "\n",
    "timestamp = {}\n",
    "\n",
    "for i in t:\n",
    "    time = t[i] + 8*60 #gets zero to be 8am\n",
    "    # Calculate PM times\n",
    "    if time > 720:\n",
    "        half = \"pm\"\n",
    "        hour, minutes = divmod(time, 60)\n",
    "        correct_hour = hour - 12\n",
    "        if correct_hour == 0:\n",
    "            correct_hour = 12\n",
    "    # Calculate AM times\n",
    "    else: \n",
    "        half = \"am\"\n",
    "        correct_hour, minutes = divmod(time, 60)\n",
    "        # format min less than 10 so there is a zero before the number\n",
    "    if minutes < 10:\n",
    "        minutes = '0{min}'.format(min = int(minutes))\n",
    "    else:\n",
    "        minutes = int(minutes)\n",
    "    result = '{hour}:{mins} {xm}'.format(hour = int(correct_hour), mins = minutes, xm = half)\n",
    "    timestamp[i] = result\n",
    "\n",
    "    \n",
    "# [Iternerary] print out the time stamps in order of the path\n",
    "iten = {}\n",
    "\n",
    "for i in path:\n",
    "    iten[i] = timestamp[i]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef611084",
   "metadata": {},
   "source": [
    "-------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d16b0979",
   "metadata": {},
   "source": [
    "## Walking Distance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "85635ef2",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'path' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/40/khdb0r0d62q_c42_9lq8c1cc0000gn/T/ipykernel_40026/2298352028.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mtotal\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m9\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpath\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwalk\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpath\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m     \u001b[0mtotal\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtotal\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mwalk\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpath\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mj\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'Exit'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'path' is not defined"
     ]
    }
   ],
   "source": [
    "j = 1\n",
    "total = 0\n",
    "for i in range(0, 9):\n",
    "    print(path[i], path[j], walk[path[i], path[j]])\n",
    "    total = total + walk[path[i], path[j]]\n",
    "    if j == 'Exit':\n",
    "        break\n",
    "    j = j + 1\n",
    "\n",
    "miles = total/1.609\n",
    "\n",
    "print('Total Miles Walked:', miles)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d84a47b",
   "metadata": {},
   "source": [
    "-------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f995881",
   "metadata": {},
   "source": [
    "## Find Path without Entrance and Exit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "36372b42",
   "metadata": {},
   "outputs": [],
   "source": [
    "# find path not including Entrance and Exit\n",
    "visited = {}\n",
    "\n",
    "for i in capitals:\n",
    "    visited[i] = 0\n",
    "\n",
    "# Start at Entrance\n",
    "path = []\n",
    "visited['Entrance'] = 1\n",
    "\n",
    "# Where to go from Entrance\n",
    "for i in capitals:\n",
    "        if vals['Entrance', i] == 1:\n",
    "            visited[i] = 1\n",
    "            path.append(i)\n",
    "            break\n",
    "\n",
    "# Continue from Entrance on path stopping before exit\n",
    "while len(path) < 8:\n",
    "    index = len(path) - 1\n",
    "    temp = path[index]\n",
    "    for i in capitals:\n",
    "        if visited[i] == 0:\n",
    "             if vals[temp, i] == 1:\n",
    "                visited[i] = 1\n",
    "                path.append(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be35e033",
   "metadata": {},
   "source": [
    "-------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1bcd4b7",
   "metadata": {},
   "source": [
    "# Mapping"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eef31e48",
   "metadata": {},
   "source": [
    "### Load Coordinates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "6cac4fb5",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Entrance': (28.4165742, -81.5812029),\n",
       " 'Its a Small World': (33.8145981, -117.9178482),\n",
       " 'Space Mountain': (33.8109685, -117.9175039),\n",
       " 'Star Wars: Rise of Resistance': (33.8137769, -117.9232498),\n",
       " 'Indiana Jones Adventure': (33.8111657, -117.9205289),\n",
       " 'Pirates of the Caribbean': (33.811757, -117.9207289),\n",
       " 'Splash Mountain': (33.8121152, -117.9224486),\n",
       " 'Big Thunder Mountain Railway': (33.8126437, -117.9203722),\n",
       " 'Matterhorn Bobsleds': (33.8130703, -117.9178203),\n",
       " 'Exit': (33.809997, -118.9189785)}"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create dictionary of latitude and longitude for each ride\n",
    "lat_long = pd.read_csv('Lat_Long.csv',index_col=0)\n",
    "\n",
    "# ride name as key with (lat, long) as values\n",
    "coordinates = {(row['Ride']): (row['Latitude'], row['Longitude']) for _, row in lat_long.iterrows()}\n",
    "\n",
    "# because coordinates are similar, change to slightly different coordinates for marker on map\n",
    "coordinates['Pirates of the Caribbean'] = (33.811757, -117.9207289)\n",
    "coordinates['Exit'] = ((33.809997, -118.9189785))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4bb77829",
   "metadata": {},
   "source": [
    "### Map stops and path on Map"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "5d332aca",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Map the route using google maps static maps\n",
    "\n",
    "# [Waypoints] use path to create waypoints that the route must go through\n",
    "waypoints = []\n",
    "\n",
    "for i in path:\n",
    "    waypoints.append(coordinates[i])\n",
    "    \n",
    "    \n",
    "# [Direction] get step by step directions from Entrance to Exit through waypoints\n",
    "results = gmaps.directions(origin = coordinates['Entrance'], destination = coordinates['Entrance'], mode = 'walking', waypoints= waypoints)\n",
    "\n",
    "\n",
    "# [Mapping] Plot on map\n",
    "marker_points = []\n",
    "waypoints = []\n",
    "\n",
    "#extract the location (lat and long) of each turn from the previous directions function\n",
    "for leg in results[0][\"legs\"]:\n",
    "    # adds a marker for each starting waypoint\n",
    "    leg_start_loc = leg[\"start_location\"]\n",
    "    marker_points.append(f'{leg_start_loc[\"lat\"]},{leg_start_loc[\"lng\"]}')\n",
    "    for step in leg[\"steps\"]:\n",
    "        # adds a point for each turn on the way to the next ride on path\n",
    "        end_loc = step[\"end_location\"]\n",
    "        waypoints.append(f'{end_loc[\"lat\"]},{end_loc[\"lng\"]}')\n",
    "# adds a marker for the last ride on path\n",
    "last_stop = results[0][\"legs\"][-1][\"end_location\"]\n",
    "marker_points.append(f'{last_stop[\"lat\"]},{last_stop[\"lng\"]}')\n",
    " \n",
    "# labels all marker points (all rides on path) with a letter\n",
    "markers = [ \"color:red|size:mid|label:\" + chr(65+i) + \"|\" \n",
    "           + r for i, r in enumerate(marker_points)]\n",
    "\n",
    "# [Print Map]\n",
    "result_map = gmaps.static_map(\n",
    "                 center = [33.812252236772736, -117.91894201571984],\n",
    "                 scale=2, \n",
    "                 zoom=16.95,\n",
    "                 size=[640, 640], \n",
    "                 format=\"jpg\", \n",
    "                 maptype=\"satellite\",\n",
    "                 markers=markers,\n",
    "                 path=\"geodesic:TRUE|color:0x0000ff|weight:2|\" + \"|\".join(waypoints))\n",
    "\n",
    "# [Save Map]\n",
    "with open('[Thesis]Time_Formulation_Map.jpg', 'wb') as img:\n",
    "    for chunk in result_map:\n",
    "        img.write(chunk)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
