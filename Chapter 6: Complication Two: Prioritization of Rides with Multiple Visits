{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cd9542d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import csv\n",
    "import os\n",
    "import numpy as np\n",
    "import gurobipy as gp\n",
    "from gurobipy import LinExpr, GRB\n",
    "from itertools import permutations\n",
    "from itertools import combinations\n",
    "import googlemaps as gmaps\n",
    "from datetime import datetime\n",
    "\n",
    "\n",
    "gmaps = gmaps.Client(key='AIzaSyCj9WXbWgWhC7vViX5nbPDr7dkd9y5PjZw')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3ce2e83",
   "metadata": {},
   "source": [
    "-------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "345635c4",
   "metadata": {},
   "source": [
    "### Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8208d038",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "## Fomulate ride, wait and distance constants\n",
    "\n",
    "import re\n",
    "\n",
    "########################## Create Sets ###############################\n",
    "\n",
    "# All Rides\n",
    "capitals = ['Entrance', \n",
    "            'Its a Small World 1', 'Its a Small World 2', \n",
    "            'Space Mountain 1', 'Space Mountain 2', \n",
    "            'Star Wars: Rise of Resistance 1', 'Star Wars: Rise of Resistance 2', \n",
    "            'Indiana Jones Adventure 1', 'Indiana Jones Adventure 2', \n",
    "            'Pirates of the Caribbean 1', 'Pirates of the Caribbean 2', \n",
    "            'Splash Mountain 1', 'Splash Mountain 2', \n",
    "            'Big Thunder Mountain Railway 1', 'Big Thunder Mountain Railway 2', \n",
    "            'Matterhorn Bobsleds 1', 'Matterhorn Bobsleds 2', \n",
    "            'Fireworks',\n",
    "            'Exit']\n",
    "\n",
    "# Main Rides and Extra Attractions\n",
    "capitals_minus = ['Its a Small World 1', 'Its a Small World 2', \n",
    "            'Space Mountain 1', 'Space Mountain 2', \n",
    "            'Star Wars: Rise of Resistance 1', 'Star Wars: Rise of Resistance 2', \n",
    "            'Indiana Jones Adventure 1', 'Indiana Jones Adventure 2', \n",
    "            'Pirates of the Caribbean 1', 'Pirates of the Caribbean 2', \n",
    "            'Splash Mountain 1', 'Splash Mountain 2', \n",
    "            'Big Thunder Mountain Railway 1', 'Big Thunder Mountain Railway 2', \n",
    "            'Matterhorn Bobsleds 1', 'Matterhorn Bobsleds 2',\n",
    "            'Fireworks']\n",
    " \n",
    "# Main Rides\n",
    "first_ride = ['Its a Small World 1', 'Space Mountain 1', \n",
    "                  'Star Wars: Rise of Resistance 1', \n",
    "                  'Indiana Jones Adventure 1', 'Pirates of the Caribbean 1', \n",
    "                  'Splash Mountain 1', 'Big Thunder Mountain Railway 1', \n",
    "                  'Matterhorn Bobsleds 1']\n",
    "\n",
    "# Duplicate of Main Rides\n",
    "second_ride = ['Its a Small World 2', 'Space Mountain 2', \n",
    "                  'Star Wars: Rise of Resistance 2', \n",
    "                  'Indiana Jones Adventure 2', 'Pirates of the Caribbean 2', \n",
    "                  'Splash Mountain 2', 'Big Thunder Mountain Railway 2', \n",
    "                  'Matterhorn Bobsleds 2']\n",
    "\n",
    "# Activities\n",
    "capitals_food = ['Entrance', \n",
    "                 'Its a Small World 1', 'Its a Small World 2', \n",
    "            'Space Mountain 1', 'Space Mountain 2', \n",
    "            'Star Wars: Rise of Resistance 1', 'Star Wars: Rise of Resistance 2', \n",
    "            'Indiana Jones Adventure 1', 'Indiana Jones Adventure 2', \n",
    "            'Pirates of the Caribbean 1', 'Pirates of the Caribbean 2',\n",
    "            'Splash Mountain 1', 'Splash Mountain 2', \n",
    "            'Big Thunder Mountain Railway 1', 'Big Thunder Mountain Railway 2',\n",
    "            'Matterhorn Bobsleds 1', 'Matterhorn Bobsleds 2', \n",
    "                'Fireworks',\n",
    "                 'Exit',\n",
    "                 'Plaza Inn - L', \n",
    "                 'Galactic Grill - L', \n",
    "                 \"Daisy's Dinner - L\", \n",
    "                 'Blue Bayou Restaurant - L', \n",
    "                 'Bengal Barbeque - L',\n",
    "                 'The Golden Horseshoe - L', \n",
    "                 'Red Rose Tavern - L', \n",
    "                 'Troubadour Tavern - L',\n",
    "                 'Plaza Inn - D', \n",
    "                 'Galactic Grill - D', \n",
    "                 \"Daisy's Dinner - D\", \n",
    "                 'Blue Bayou Restaurant - D', \n",
    "                 'Bengal Barbeque - D',\n",
    "                 'The Golden Horseshoe - D', \n",
    "                 'Red Rose Tavern - D', \n",
    "                 'Troubadour Tavern - D']\n",
    "\n",
    "# Food Option Names \n",
    "food = ['Plaza Inn - L', \n",
    "        'Galactic Grill - L', \n",
    "        \"Daisy's Dinner - L\", \n",
    "        'Blue Bayou Restaurant - L', \n",
    "        'Bengal Barbeque - L',\n",
    "        'The Golden Horseshoe - L', \n",
    "        'Red Rose Tavern - L', \n",
    "        'Troubadour Tavern - L',\n",
    "        'Plaza Inn - D', \n",
    "        'Galactic Grill - D', \n",
    "        \"Daisy's Dinner - D\", \n",
    "        'Blue Bayou Restaurant - D', \n",
    "        'Bengal Barbeque - D',\n",
    "        'The Golden Horseshoe - D', \n",
    "        'Red Rose Tavern - D', \n",
    "        'Troubadour Tavern - D']\n",
    "\n",
    "########################## Parameters ###############################\n",
    "\n",
    "# Average wait time\n",
    "av_wt = [0,\n",
    " 14.176750419333157, 14.176750419333157, \n",
    " 49.2742706178715, 49.2742706178715, \n",
    " 100.52732538989471, 100.52732538989471,\n",
    " 42.74889237079236, 42.74889237079236, \n",
    " 23.366666395373894, 23.366666395373894,\n",
    " 30.709718187729766, 30.709718187729766,\n",
    " 33.67079740724337, 33.67079740724337, \n",
    " 37.825957101015725, 37.825957101015725,\n",
    "        10,\n",
    " 0, \n",
    " 0, \n",
    " 0, \n",
    " 0, \n",
    " 0, \n",
    " 0, \n",
    " 0, \n",
    " 0, \n",
    " 0, \n",
    " 0, \n",
    " 0, \n",
    " 0,\n",
    " 0,\n",
    " 0, \n",
    " 0, \n",
    " 0,\n",
    " 0]\n",
    "\n",
    "# Ride Time\n",
    "ride = [0, 14, 14, \n",
    "        5, 5, \n",
    "        18, 18,\n",
    "        10, 10,\n",
    "        10, 10,\n",
    "        11, 11,\n",
    "        3.5, 3.5,\n",
    "        4, 4, \n",
    "    20,\n",
    "        0, \n",
    "        45, 45, 45, 45, 45, 45, 45, 45, 65, 65, 65, 65, 65, 65, 65, 65]\n",
    "\n",
    "# Create Dictionaries for wait and ride time\n",
    "wait = {}\n",
    "ride_time = {}\n",
    "\n",
    "for i in range(0,35):\n",
    "    wait[capitals_food[i]] = av_wt[i]\n",
    "    ride_time[capitals_food[i]] = ride[i]\n",
    "\n",
    "# Prioritization\n",
    "# larger reward for better rides\n",
    "reward_val = [5, 5, 7, 7, 8, 8, 6, 6, 4, 4, 1, 1, 3, 3, 2, 2, 9, 9]\n",
    "\n",
    "reward = {}\n",
    "for i in range(0, 17):\n",
    "    reward[capitals_minus[i]]= reward_val[i]\n",
    "    \n",
    "    \n",
    "    \n",
    "# DISTANCE MATRIX\n",
    "\n",
    "distance_matrix = pd.read_csv('distance_matrix_trides.csv',index_col=0)\n",
    "\n",
    "# convert to dictionary\n",
    "dist = {(row['Origin'], row['Destination']): row['Walk Time'] for _, row in distance_matrix.iterrows()}\n",
    "\n",
    "# make matching origin and destinations larger\n",
    "for key,value in dist.items():\n",
    "    if key[0] == key[1]:\n",
    "        dist[key] = 100\n",
    "\n",
    "# Special Case for the double entrance value\n",
    "dist['Entrance', 'Exit'] = 100\n",
    "dist['Exit', 'Entrance'] = 100"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de971e8f",
   "metadata": {},
   "source": [
    "-------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1d961ec",
   "metadata": {},
   "source": [
    "## Problem Formulation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c3ab0610",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Set parameter Username\n",
      "Academic license - for non-commercial use only - expires 2024-02-29\n"
     ]
    }
   ],
   "source": [
    "import gurobipy as gp\n",
    "from gurobipy import LinExpr, GRB\n",
    "\n",
    "m = gp.Model()\n",
    "\n",
    "# [Parameter] large number double that of the ub on time\n",
    "M = 2000\n",
    "\n",
    "# [Parameter] 16 hours of park opening\n",
    "T = 960\n",
    "\n",
    "\n",
    "# [Variable] Arch connections: is ride 'i' adjacent to ride 'j' on the route?\n",
    "vars = m.addVars(dist.keys(), obj=dist, vtype=GRB.BINARY, name='x')\n",
    "\n",
    "# [Variable] Timestamp: What time does the guest arrive at each ride?\n",
    "t = m.addVars(capitals_food, lb = 0, ub = T)\n",
    "\n",
    "# [Variable] Check for visiting a lunch food stop\n",
    "food_stop = m.addVars(food, vtype=GRB.BINARY)\n",
    "\n",
    "# [Variable] Check for if visiting a ride\n",
    "ride_stop = m.addVars(capitals_minus, vtype=GRB.BINARY)\n",
    "\n",
    "\n",
    "\n",
    "# [Constraint] Input/Output constraints to create a route with no subtours where all rides visited once\n",
    "for i in capitals_food:\n",
    "    input = 0\n",
    "    output = 0\n",
    "    # sum across all combinations of pairings\n",
    "    for j in capitals_food:\n",
    "        if i != j:\n",
    "            input += vars[j, i]\n",
    "            output += vars[i,j]\n",
    "    if i == 'Entrance':\n",
    "        # Entrance should have not input and 1 output\n",
    "        m.addConstr(output == 1)\n",
    "    elif i == 'Exit':\n",
    "        # Exit should have 1 input and no outputs\n",
    "        m.addConstr(input ==1)\n",
    "    else: \n",
    "        m.addConstr(input == output)\n",
    "        # must ride each ride once\n",
    "        if i in first_ride:\n",
    "            m.addConstr(input == 1)\n",
    "            m.addConstr(input == ride_stop[i])\n",
    "        elif i not in food:\n",
    "            m.addConstr(input <= 1) \n",
    "            m.addConstr(input == ride_stop[i])\n",
    "        else: \n",
    "            m.addConstr(input == food_stop[i])\n",
    "\n",
    "# [Constraint] Must visit 2 food locations            \n",
    "m.addConstr(food_stop.sum() == 2)        \n",
    " \n",
    "# [Constraint] No Repeats\n",
    "j = 0\n",
    "for i in first_ride:\n",
    "        m.addConstr(vars[i, second_ride[j]] == 0)\n",
    "        m.addConstr(vars[second_ride[j],i] == 0)\n",
    "        j = j + 1\n",
    "        \n",
    "    \n",
    "# [Constraint] total timing: must be less than the total hours of the park\n",
    "m.addConstr(t['Exit']-t['Entrance']<= T)\n",
    "\n",
    "# [Constraint] Start time at 0\n",
    "m.addConstr(t['Entrance'] == 0)\n",
    "\n",
    "# [Constraint] Time must forward for rides and food\n",
    "for i in capitals_food:\n",
    "    for j in capitals_food:\n",
    "        if i != j:\n",
    "            m.addConstr(t[j] >= t[i] - M*(1-vars[i, j]) + dist[i, j] + wait[i] + ride_time[i])\n",
    "            \n",
    "            \n",
    "        \n",
    "# [Constraint] Must Visit lunch between 11 and 2  \n",
    "total1 = 0\n",
    "for i in range(0, 8):\n",
    "    f = food[i]\n",
    "    total1 = total1 + food_stop[f]\n",
    "    m.addConstr(360 >= t[f])\n",
    "    m.addConstr(180 <= t[f])\n",
    "\n",
    "# [Constraint] Must have one lunch stop and one dinner stop\n",
    "m.addConstr(total1 == 1)\n",
    "    \n",
    "# [Constraint] Must Visit dinner between 5 and 8  \n",
    "for i in range(8, 16):\n",
    "    f = food[i]\n",
    "    m.addConstr(720 >= t[f])\n",
    "    m.addConstr(540 <= t[f])\n",
    "    \n",
    "\n",
    "# [Constraint] Cannot visit the same food place twice (unique lunch and dinner)\n",
    "for i in range(0,8):\n",
    "    f = food[i]\n",
    "    g = food[i+8]\n",
    "    m.addConstr(food_stop[f]+food_stop[g]<=1)\n",
    "    \n",
    "# # [Constraint] Visit parade between 2pm and 4 pm\n",
    "# m.addConstr(t['Parade']>= 360)\n",
    "# m.addConstr(t['Parade']<= 480)\n",
    "\n",
    "# [Constraint] Visit Fireworks between 8:40and 9\n",
    "m.addConstr(t['Fireworks'] >= 780) # 9:00 pm\n",
    "m.addConstr(t['Fireworks'] <= 840) # 10:00 pm\n",
    "    \n",
    "    \n",
    "    \n",
    "# [Objective] Set objective to minimize the time guest arrives at Exit and to minimize the walking distance\n",
    "m.ModelSense = GRB.MINIMIZE\n",
    "m.setObjective(-gp.quicksum(ride_stop[i]*reward[i] for i in capitals_minus), 0)\n",
    "m.setObjectiveN(gp.quicksum(vars[i, j]*dist[i,j] for i, j in vars.keys()), 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4ce24173",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gurobi Optimizer version 9.5.2 build v9.5.2rc0 (mac64[rosetta2])\n",
      "Thread count: 8 physical cores, 8 logical processors, using up to 8 threads\n",
      "Optimize a model with 1337 rows, 1293 columns and 7708 nonzeros\n",
      "Model fingerprint: 0xfac29dea\n",
      "Variable types: 35 continuous, 1258 integer (1258 binary)\n",
      "Coefficient statistics:\n",
      "  Matrix range     [1e+00, 2e+03]\n",
      "  Objective range  [1e+00, 1e+02]\n",
      "  Bounds range     [1e+00, 1e+03]\n",
      "  RHS range        [1e+00, 2e+03]\n",
      "\n",
      "---------------------------------------------------------------------------\n",
      "Multi-objectives: starting optimization with 2 objectives (1 combined) ...\n",
      "---------------------------------------------------------------------------\n",
      "---------------------------------------------------------------------------\n",
      "\n",
      "Multi-objectives: optimize objective 1 (weighted) ...\n",
      "---------------------------------------------------------------------------\n",
      "\n",
      "Optimize a model with 1337 rows, 1293 columns and 7708 nonzeros\n",
      "Model fingerprint: 0x155b9bfb\n",
      "Variable types: 35 continuous, 1258 integer (1258 binary)\n",
      "Coefficient statistics:\n",
      "  Matrix range     [1e+00, 2e+03]\n",
      "  Objective range  [1e+00, 1e+02]\n",
      "  Bounds range     [1e+00, 1e+03]\n",
      "  RHS range        [1e+00, 2e+03]\n",
      "Presolve removed 400 rows and 294 columns\n",
      "Presolve time: 0.03s\n",
      "Presolved: 937 rows, 999 columns, 4489 nonzeros\n",
      "Variable types: 34 continuous, 965 integer (965 binary)\n",
      "\n",
      "Root relaxation: objective -3.900000e+01, 123 iterations, 0.00 seconds (0.00 work units)\n",
      "\n",
      "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
      " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
      "\n",
      "     0     0  -39.00000    0   16          -  -39.00000      -     -    0s\n",
      "     0     0  -38.68513    0   46          -  -38.68513      -     -    0s\n",
      "     0     0  -38.68513    0   46          -  -38.68513      -     -    0s\n",
      "     0     0  -38.68513    0   32          -  -38.68513      -     -    0s\n",
      "     0     0  -38.68513    0   44          -  -38.68513      -     -    0s\n",
      "     0     0  -38.52190    0   45          -  -38.52190      -     -    0s\n",
      "     0     0  -38.52190    0   46          -  -38.52190      -     -    0s\n",
      "     0     0  -38.50000    0   33          -  -38.50000      -     -    0s\n",
      "     0     0  -38.50000    0   51          -  -38.50000      -     -    0s\n",
      "     0     0  -38.50000    0   38          -  -38.50000      -     -    0s\n",
      "     0     0  -38.21159    0   46          -  -38.21159      -     -    0s\n",
      "     0     0  -38.05556    0   50          -  -38.05556      -     -    0s\n",
      "     0     0  -38.05556    0   50          -  -38.05556      -     -    0s\n",
      "     0     0  -38.05556    0   25          -  -38.05556      -     -    0s\n",
      "     0     0  -38.05556    0   47          -  -38.05556      -     -    0s\n",
      "     0     0  -38.05556    0   50          -  -38.05556      -     -    0s\n",
      "     0     0  -38.05556    0   51          -  -38.05556      -     -    0s\n",
      "     0     0  -38.05556    0   29          -  -38.05556      -     -    0s\n",
      "H    0     0                       5.0000000  -38.05556   861%     -    0s\n",
      "     0     0  -38.05556    0   29    5.00000  -38.05556   861%     -    0s\n",
      "H    0     0                      -2.0000000  -37.55556  1778%     -    0s\n",
      "H    0     0                      -5.0000000  -37.55556   651%     -    0s\n",
      "H    0     2                     -10.0000000  -37.55556   276%     -    0s\n",
      "     0     2  -37.55556    0   25  -10.00000  -37.55556   276%     -    0s\n",
      "H   31    40                     -13.0000000  -36.00000   177%  51.3    0s\n",
      "H   33    40                     -14.0000000  -36.00000   157%  49.1    0s\n",
      "H   36    40                     -16.0000000  -36.00000   125%  48.4    0s\n",
      "H  789   758                     -17.0000000  -36.00000   112%   9.7    0s\n",
      "H  799   748                     -18.0000000  -36.00000   100%   9.8    0s\n",
      "H  800   731                     -20.0000000  -36.00000  80.0%   9.8    0s\n",
      "H 1475  1207                     -21.0000000  -36.00000  71.4%   8.6    0s\n",
      "H 1509  1175                     -22.0000000  -36.00000  63.6%   8.9    1s\n",
      "H 1517  1123                     -23.0000000  -36.00000  56.5%   8.9    1s\n",
      "H 2586  1541                     -25.0000000  -36.00000  44.0%   9.3    1s\n",
      "H 2588  1427                     -27.0000000  -36.00000  33.3%   9.3    1s\n",
      "H16179  8323                     -28.0000000  -35.18610  25.7%   9.1    3s\n",
      " 30008 16390  -33.50000   35   29  -28.00000  -35.00000  25.0%   9.1    6s\n",
      " 32372 17236  -34.04569   47   17  -28.00000  -35.00000  25.0%   9.4   10s\n",
      "H40806 18712                     -29.0000000  -35.00000  20.7%   9.5   11s\n",
      " 47832 20731  -30.00000   82   10  -29.00000  -34.50000  19.0%   9.9   15s\n",
      " 80242 29880  -32.76463   57   32  -29.00000  -34.13459  17.7%  10.5   20s\n",
      " 143722 57608  -34.00000   51   28  -29.00000  -34.00000  17.2%  10.2   25s\n",
      " 208156 95016     cutoff  100       -29.00000  -34.00000  17.2%   9.8   30s\n",
      " 275542 135092  -33.60723   44   12  -29.00000  -34.00000  17.2%   9.5   35s\n",
      " 342558 173966  -33.84761   57   39  -29.00000  -33.95808  17.1%   9.4   40s\n",
      " 412041 212605  -32.87711   58   11  -29.00000  -33.85635  16.7%   9.3   45s\n",
      " 477214 244920  -32.25000   61   20  -29.00000  -33.78152  16.5%   9.3   50s\n",
      " 529624 268337  -32.00000   67   26  -29.00000  -33.71314  16.3%   9.4   55s\n",
      " 590229 297126     cutoff   68       -29.00000  -33.65375  16.0%   9.4   60s\n",
      " 652809 324366  -31.94715   61   34  -29.00000  -33.58907  15.8%   9.4   65s\n",
      " 712471 348064 infeasible   87       -29.00000  -33.51183  15.6%   9.4   70s\n",
      " 760383 365262  -30.50239   77   23  -29.00000  -33.50000  15.5%   9.6   75s\n",
      " 808416 380485  -31.00000   60   30  -29.00000  -33.44329  15.3%   9.7   80s\n",
      " 853492 391133 infeasible   60       -29.00000  -33.36635  15.1%   9.8   85s\n",
      " 896808 402774  -30.00000  100    8  -29.00000  -33.30117  14.8%   9.9   90s\n",
      " 942922 410803  -31.45973   64   35  -29.00000  -33.20612  14.5%  10.0   95s\n",
      " 987485 417565 infeasible   82       -29.00000  -33.09766  14.1%  10.1  100s\n",
      " 1031343 422025  -30.11273   69   14  -29.00000  -33.00000  13.8%  10.2  105s\n",
      " 1081093 423732  -32.66664   58   17  -29.00000  -33.00000  13.8%  10.3  110s\n",
      " 1134195 436361  -31.88519   49   33  -29.00000  -33.00000  13.8%  10.3  115s\n",
      " 1185320 454232  -32.59241   61   14  -29.00000  -33.00000  13.8%  10.3  120s\n",
      " 1240711 475042  -31.69231   62    8  -29.00000  -33.00000  13.8%  10.3  125s\n",
      " 1297041 495888  -32.20947   60   12  -29.00000  -33.00000  13.8%  10.3  130s\n",
      " 1351918 517058  -31.67594   70    8  -29.00000  -33.00000  13.8%  10.2  135s\n",
      " 1402387 536793 infeasible   55       -29.00000  -33.00000  13.8%  10.2  140s\n",
      " 1454735 556773  -30.88159   72   23  -29.00000  -33.00000  13.8%  10.2  145s\n",
      " 1509230 577724  -32.04307   81   13  -29.00000  -33.00000  13.8%  10.2  150s\n",
      " 1559827 596546  -30.92476   59   11  -29.00000  -33.00000  13.8%  10.2  155s\n",
      " 1608737 614836  -32.84509   62    6  -29.00000  -33.00000  13.8%  10.2  160s\n",
      " 1664351 635556  -32.00000   59    8  -29.00000  -33.00000  13.8%  10.2  165s\n",
      " 1716349 654287  -31.00000   69   13  -29.00000  -33.00000  13.8%  10.2  170s\n",
      " 1770070 673943  -31.49009   67   35  -29.00000  -33.00000  13.8%  10.2  175s\n",
      " 1814717 691019  -32.33333   69   27  -29.00000  -33.00000  13.8%  10.3  180s\n",
      " 1868016 710288  -32.48735   53    8  -29.00000  -33.00000  13.8%  10.3  185s\n",
      " 1920216 728626  -31.96588   83   15  -29.00000  -33.00000  13.8%  10.3  190s\n",
      " 1966389 744750  -32.50457   53   17  -29.00000  -33.00000  13.8%  10.3  195s\n",
      " 2017315 763021  -32.49519   70   19  -29.00000  -33.00000  13.8%  10.3  200s\n",
      " 2068400 781024 infeasible   65       -29.00000  -33.00000  13.8%  10.3  205s\n",
      " 2123824 800190  -32.00000   74   28  -29.00000  -33.00000  13.8%  10.3  210s\n",
      " 2176353 818859  -32.38557   69   22  -29.00000  -33.00000  13.8%  10.4  215s\n",
      " 2222592 836059     cutoff   74       -29.00000  -33.00000  13.8%  10.4  220s\n",
      " 2274675 854446  -32.38915   68   23  -29.00000  -33.00000  13.8%  10.4  225s\n",
      " 2330026 874750  -32.61704   56   12  -29.00000  -33.00000  13.8%  10.4  230s\n",
      " 2381609 894149  -33.00000   58    6  -29.00000  -33.00000  13.8%  10.4  235s\n",
      " 2431628 912226 infeasible   56       -29.00000  -33.00000  13.8%  10.4  240s\n",
      " 2485358 932100  -32.72849   71   21  -29.00000  -33.00000  13.8%  10.4  245s\n",
      " 2537995 952412     cutoff   63       -29.00000  -33.00000  13.8%  10.4  250s\n",
      " 2593877 974496  -32.70163   73   14  -29.00000  -33.00000  13.8%  10.4  255s\n",
      " 2640565 985769  -32.80505   56    6  -29.00000  -32.97053  13.7%  10.4  260s\n",
      " 2690308 996254  -30.40105   68    4  -29.00000  -32.92909  13.5%  10.5  265s\n",
      " 2730420 1005342  -31.44358   57   20  -29.00000  -32.90587  13.5%  10.5  270s\n",
      " 2779073 1017324  -32.75964   65    8  -29.00000  -32.88386  13.4%  10.5  275s\n",
      " 2827426 1028063  -32.86019   54   27  -29.00000  -32.86457  13.3%  10.5  280s\n",
      " 2874224 1037390  -32.00000   60   11  -29.00000  -32.84681  13.3%  10.5  285s\n",
      " 2917974 1045630  -32.00000   54    4  -29.00000  -32.83352  13.2%  10.6  290s\n",
      " 2966465 1054475 infeasible   75       -29.00000  -32.81577  13.2%  10.6  295s\n",
      " 3010390 1061752     cutoff   63       -29.00000  -32.79898  13.1%  10.6  300s\n",
      " 3055184 1068955  -31.52962   53   10  -29.00000  -32.78474  13.1%  10.6  305s\n",
      " 3102471 1075924  -32.58479   62   22  -29.00000  -32.77116  13.0%  10.6  310s\n",
      " 3148043 1082070  -32.12131   87   17  -29.00000  -32.75460  12.9%  10.6  315s\n",
      " 3188498 1087975  -32.00000   57   11  -29.00000  -32.74092  12.9%  10.7  320s\n",
      " 3230973 1093190 infeasible   59       -29.00000  -32.72355  12.8%  10.7  325s\n",
      " 3277411 1098336 infeasible   66       -29.00000  -32.70542  12.8%  10.7  330s\n",
      " 3321426 1103096  -31.16424   57   20  -29.00000  -32.69060  12.7%  10.7  335s\n",
      " 3370480 1109735     cutoff   71       -29.00000  -32.67815  12.7%  10.7  340s\n",
      " 3412355 1114651  -31.36971   69   10  -29.00000  -32.66667  12.6%  10.7  345s\n",
      " 3458723 1118815  -32.65171   64   19  -29.00000  -32.65251  12.6%  10.8  350s\n",
      " 3509648 1123895 infeasible   67       -29.00000  -32.63902  12.5%  10.8  355s\n",
      " 3556086 1126490  -30.95896   58   21  -29.00000  -32.61986  12.5%  10.8  360s\n",
      " 3602898 1129459     cutoff   69       -29.00000  -32.60435  12.4%  10.8  365s\n",
      " 3647514 1133098  -32.00000   56    4  -29.00000  -32.59116  12.4%  10.8  370s\n",
      " 3692797 1135351     cutoff   73       -29.00000  -32.57575  12.3%  10.8  375s\n",
      " 3740799 1136637  -32.39092   70   19  -29.00000  -32.55816  12.3%  10.9  380s\n",
      " 3783161 1138712  -30.60795   68   14  -29.00000  -32.54643  12.2%  10.9  385s\n",
      " 3831978 1139597 infeasible   79       -29.00000  -32.52980  12.2%  10.9  390s\n",
      " 3879626 1138862  -31.00000   54   16  -29.00000  -32.50956  12.1%  10.9  395s\n",
      " 3917809 1138709     cutoff   69       -29.00000  -32.50691  12.1%  10.9  400s\n",
      " 3957205 1138432  -30.00000   60   13  -29.00000  -32.50691  12.1%  11.0  405s\n",
      " 3997566 1137761 infeasible   59       -29.00000  -32.50691  12.1%  11.1  410s\n",
      " 4034526 1136236  -32.00000   59   14  -29.00000  -32.50000  12.1%  11.1  415s\n",
      " 4077702 1144195  -30.69679   52    9  -29.00000  -32.50000  12.1%  11.1  420s\n",
      " 4120610 1149918 infeasible   50       -29.00000  -32.49454  12.1%  11.1  425s\n",
      " 4167149 1148380 infeasible   66       -29.00000  -32.47642  12.0%  11.2  430s\n",
      " 4212636 1145946     cutoff   68       -29.00000  -32.45550  11.9%  11.2  435s\n",
      " 4258177 1143595  -30.00000   63    8  -29.00000  -32.43537  11.8%  11.2  440s\n",
      " 4305020 1141257 infeasible   81       -29.00000  -32.41390  11.8%  11.2  445s\n",
      " 4349722 1138323 infeasible   78       -29.00000  -32.39533  11.7%  11.2  450s\n",
      " 4397015 1134160  -32.21538   62   26  -29.00000  -32.37392  11.6%  11.2  455s\n",
      " 4440227 1129456     cutoff   60       -29.00000  -32.35525  11.6%  11.2  460s\n",
      " 4487487 1123794     cutoff   64       -29.00000  -32.33333  11.5%  11.3  465s\n",
      " 4532631 1121066     cutoff   70       -29.00000  -32.31711  11.4%  11.3  470s\n",
      " 4581070 1113517     cutoff   76       -29.00000  -32.29288  11.4%  11.3  475s\n",
      " 4624938 1106242     cutoff   63       -29.00000  -32.26761  11.3%  11.3  480s\n",
      " 4670347 1099304 infeasible   69       -29.00000  -32.24254  11.2%  11.3  485s\n",
      " 4719641 1089220  -31.00000   67    4  -29.00000  -32.21091  11.1%  11.4  490s\n",
      " 4769794 1079016 infeasible   65       -29.00000  -32.17999  11.0%  11.4  495s\n",
      " 4814977 1068502 infeasible   58       -29.00000  -32.14878  10.9%  11.4  500s\n",
      " 4864456 1056442  -31.79401   63   13  -29.00000  -32.11377  10.7%  11.4  505s\n",
      " 4916602 1043868  -30.00000   69    8  -29.00000  -32.07864  10.6%  11.4  510s\n",
      " 4966166 1030220  -30.52354   65   21  -29.00000  -32.03678  10.5%  11.4  515s\n",
      " 5015920 1015563     cutoff   77       -29.00000  -32.00020  10.3%  11.5  520s\n",
      " 5060778 1001066  -30.00000   68   11  -29.00000  -32.00000  10.3%  11.5  525s\n",
      " 5110541 982522  -31.00000   57    4  -29.00000  -32.00000  10.3%  11.5  530s\n",
      " 5159823 984113 infeasible   61       -29.00000  -32.00000  10.3%  11.5  535s\n",
      " 5210627 984087  -31.39601   65   15  -29.00000  -32.00000  10.3%  11.5  540s\n",
      " 5260988 983868  -31.67250   67   10  -29.00000  -32.00000  10.3%  11.5  545s\n",
      " 5311725 986584     cutoff   80       -29.00000  -32.00000  10.3%  11.5  550s\n",
      " 5362813 989933  -30.95469   56   19  -29.00000  -32.00000  10.3%  11.5  555s\n",
      " 5405696 992852 infeasible   69       -29.00000  -32.00000  10.3%  11.5  560s\n",
      " 5455165 996416  -32.00000   73    4  -29.00000  -32.00000  10.3%  11.5  565s\n",
      " 5507421 1001026 infeasible   65       -29.00000  -32.00000  10.3%  11.5  570s\n",
      " 5557254 1004110 infeasible   75       -29.00000  -32.00000  10.3%  11.5  575s\n",
      " 5607787 1008119 infeasible   58       -29.00000  -32.00000  10.3%  11.5  580s\n",
      " 5653163 1012633 infeasible   83       -29.00000  -32.00000  10.3%  11.5  585s\n",
      " 5704039 1017016  -31.00000   70    4  -29.00000  -32.00000  10.3%  11.5  590s\n",
      " 5756095 1021655  -32.00000   71   13  -29.00000  -32.00000  10.3%  11.5  595s\n",
      " 5801334 1025840  -31.90163   51   10  -29.00000  -32.00000  10.3%  11.5  600s\n",
      " 5853028 1029905  -31.30815   69   25  -29.00000  -32.00000  10.3%  11.5  605s\n",
      " 5895980 1033560  -32.00000   62    4  -29.00000  -32.00000  10.3%  11.5  610s\n",
      " 5945862 1039390  -32.00000   65    6  -29.00000  -32.00000  10.3%  11.5  615s\n",
      " 5997074 1044922 infeasible   75       -29.00000  -32.00000  10.3%  11.5  620s\n",
      " 6040257 1048424 infeasible   77       -29.00000  -32.00000  10.3%  11.5  625s\n",
      " 6089997 1053927  -32.00000   57    6  -29.00000  -32.00000  10.3%  11.5  630s\n",
      " 6138729 1059640  -31.00000   68   10  -29.00000  -32.00000  10.3%  11.5  635s\n",
      " 6188550 1065292  -31.44571   63   18  -29.00000  -32.00000  10.3%  11.5  640s\n",
      " 6235956 1070555  -31.66194   68   15  -29.00000  -32.00000  10.3%  11.5  645s\n",
      " 6286405 1075307  -32.00000   73    8  -29.00000  -32.00000  10.3%  11.5  650s\n",
      " 6334631 1080923  -31.64696   65    8  -29.00000  -32.00000  10.3%  11.5  655s\n",
      " 6383646 1087190  -30.72769   64   25  -29.00000  -32.00000  10.3%  11.5  660s\n",
      " 6430236 1092749  -31.85822   71   13  -29.00000  -32.00000  10.3%  11.5  665s\n",
      " 6479103 1098703     cutoff   66       -29.00000  -32.00000  10.3%  11.5  670s\n",
      " 6526382 1104618     cutoff   67       -29.00000  -32.00000  10.3%  11.5  675s\n",
      " 6576297 1110896 infeasible   81       -29.00000  -32.00000  10.3%  11.5  680s\n",
      " 6619320 1116588  -32.00000   56   24  -29.00000  -32.00000  10.3%  11.5  685s\n",
      " 6664465 1122426 infeasible   63       -29.00000  -32.00000  10.3%  11.5  690s\n",
      " 6712803 1127845  -31.87176   63   16  -29.00000  -32.00000  10.3%  11.5  695s\n",
      " 6761600 1133546 infeasible   72       -29.00000  -32.00000  10.3%  11.5  700s\n",
      " 6811050 1139579 infeasible   58       -29.00000  -32.00000  10.3%  11.5  705s\n",
      " 6856475 1145365 infeasible   69       -29.00000  -32.00000  10.3%  11.5  710s\n",
      " 6905027 1151173     cutoff  106       -29.00000  -32.00000  10.3%  11.5  715s\n",
      " 6952577 1156872  -31.86650   67   36  -29.00000  -32.00000  10.3%  11.5  720s\n",
      " 6993310 1162297  -31.68105   79   12  -29.00000  -32.00000  10.3%  11.5  725s\n",
      " 7041159 1168780     cutoff   67       -29.00000  -32.00000  10.3%  11.5  730s\n",
      " 7087220 1174062  -30.43498   70   12  -29.00000  -32.00000  10.3%  11.5  735s\n",
      " 7132669 1179698 infeasible   71       -29.00000  -32.00000  10.3%  11.5  740s\n",
      " 7178452 1184820     cutoff   67       -29.00000  -32.00000  10.3%  11.5  745s\n",
      " 7225216 1190226  -32.00000   61    6  -29.00000  -32.00000  10.3%  11.5  750s\n",
      " 7270087 1195926  -31.00000   83    6  -29.00000  -32.00000  10.3%  11.5  755s\n",
      " 7315458 1201921  -32.00000   53    8  -29.00000  -32.00000  10.3%  11.5  760s\n",
      " 7358819 1207944  -31.76707   68   22  -29.00000  -32.00000  10.3%  11.5  765s\n",
      " 7405050 1213035 infeasible   78       -29.00000  -32.00000  10.3%  11.5  770s\n",
      " 7448893 1218403 infeasible   62       -29.00000  -32.00000  10.3%  11.5  775s\n",
      " 7495342 1223366  -31.52005   73   19  -29.00000  -32.00000  10.3%  11.5  780s\n",
      " 7538267 1228226 infeasible   63       -29.00000  -32.00000  10.3%  11.5  785s\n",
      " 7584252 1233313  -31.00029   95    4  -29.00000  -32.00000  10.3%  11.5  790s\n",
      " 7628093 1238871 infeasible   59       -29.00000  -32.00000  10.3%  11.5  795s\n",
      " 7671386 1243686  -31.56290   69   12  -29.00000  -32.00000  10.3%  11.5  800s\n",
      " 7718874 1249676  -31.91027   60    8  -29.00000  -32.00000  10.3%  11.5  805s\n",
      " 7763052 1254430  -31.33882   62   25  -29.00000  -32.00000  10.3%  11.5  810s\n",
      " 7808601 1259060  -32.00000   73   10  -29.00000  -32.00000  10.3%  11.5  815s\n",
      " 7849609 1263658 infeasible   78       -29.00000  -32.00000  10.3%  11.5  820s\n",
      " 7889186 1267979  -30.66430   64    8  -29.00000  -32.00000  10.3%  11.6  825s\n",
      " 7934240 1274375  -31.39895   65   13  -29.00000  -32.00000  10.3%  11.6  830s\n",
      " 7975800 1280382  -30.57142   79   10  -29.00000  -32.00000  10.3%  11.6  835s\n",
      " 8022774 1285662  -30.00000   70   13  -29.00000  -32.00000  10.3%  11.6  840s\n",
      " 8070073 1292360 infeasible   75       -29.00000  -32.00000  10.3%  11.6  845s\n",
      " 8114666 1297791  -31.42715   67   10  -29.00000  -32.00000  10.3%  11.6  850s\n",
      " 8160138 1303409  -32.00000   64   11  -29.00000  -32.00000  10.3%  11.6  855s\n",
      " 8205811 1308165  -31.68840   71   16  -29.00000  -32.00000  10.3%  11.6  860s\n",
      " 8249863 1312619  -31.55362   74   20  -29.00000  -32.00000  10.3%  11.6  865s\n",
      " 8296414 1317558  -31.88134   90   35  -29.00000  -32.00000  10.3%  11.6  870s\n",
      " 8340488 1322788  -31.79427   63    6  -29.00000  -32.00000  10.3%  11.6  875s\n",
      " 8381596 1327515  -31.59205   61   16  -29.00000  -32.00000  10.3%  11.6  880s\n",
      " 8426853 1331963 infeasible   57       -29.00000  -32.00000  10.3%  11.6  885s\n",
      " 8471510 1336510  -30.72773   65   17  -29.00000  -32.00000  10.3%  11.6  890s\n",
      " 8518449 1342533     cutoff   74       -29.00000  -32.00000  10.3%  11.6  895s\n",
      " 8563680 1347650 infeasible   61       -29.00000  -32.00000  10.3%  11.6  900s\n",
      " 8607416 1353256  -31.90081   66   14  -29.00000  -32.00000  10.3%  11.6  905s\n",
      " 8650337 1358217  -32.00000   71    8  -29.00000  -32.00000  10.3%  11.6  910s\n",
      " 8696521 1363539  -31.00000   68   12  -29.00000  -32.00000  10.3%  11.6  915s\n",
      " 8743427 1368741  -31.31181   69   30  -29.00000  -32.00000  10.3%  11.6  920s\n",
      " 8788841 1373985  -30.61459   76   13  -29.00000  -32.00000  10.3%  11.6  925s\n",
      " 8834446 1379750     cutoff   71       -29.00000  -32.00000  10.3%  11.6  930s\n",
      " 8881814 1386639  -31.81356   78   14  -29.00000  -32.00000  10.3%  11.6  935s\n",
      " 8929476 1395373  -30.00000   83   12  -29.00000  -32.00000  10.3%  11.6  940s\n",
      " 8976371 1402912 infeasible   60       -29.00000  -32.00000  10.3%  11.6  945s\n",
      " 9021942 1402307     cutoff   73       -29.00000  -31.98967  10.3%  11.6  950s\n",
      " 9070092 1400691     cutoff   77       -29.00000  -31.97585  10.3%  11.6  955s\n",
      " 9118861 1396571  -30.89376   84   24  -29.00000  -31.95898  10.2%  11.6  960s\n",
      " 9165216 1392613  -31.23522   65   23  -29.00000  -31.94304  10.1%  11.6  965s\n",
      " 9216187 1389020 infeasible   87       -29.00000  -31.92722  10.1%  11.6  970s\n",
      " 9265903 1386189  -31.00000   73    4  -29.00000  -31.91269  10.0%  11.7  975s\n",
      " 9313069 1384844  -31.37808   77   21  -29.00000  -31.90128  10.0%  11.7  980s\n",
      " 9361690 1382995 infeasible   91       -29.00000  -31.88973  10.0%  11.7  985s\n",
      " 9409373 1380755  -31.86235   74   28  -29.00000  -31.87924  9.93%  11.7  990s\n",
      " 9451838 1378193  -31.44322   83   17  -29.00000  -31.86927  9.89%  11.7  995s\n",
      " 9501948 1375128  -30.00000   59   13  -29.00000  -31.85714  9.85%  11.7 1000s\n",
      " 9553875 1371689  -31.00000   82    6  -29.00000  -31.84591  9.81%  11.7 1005s\n",
      " 9601630 1368274  -31.66609   62   24  -29.00000  -31.83626  9.78%  11.7 1010s\n",
      " 9651288 1364011 infeasible   59       -29.00000  -31.82507  9.74%  11.7 1015s\n",
      " 9703059 1358800  -30.64808   60   13  -29.00000  -31.81263  9.70%  11.7 1020s\n",
      " 9749524 1354307  -31.23791   79   33  -29.00000  -31.80159  9.66%  11.7 1025s\n",
      " 9793516 1350239  -30.83616   66   20  -29.00000  -31.79261  9.63%  11.7 1030s\n",
      " 9845260 1343984  -30.72758   73   18  -29.00000  -31.78104  9.59%  11.7 1035s\n",
      " 9895662 1338059     cutoff   74       -29.00000  -31.77039  9.55%  11.7 1040s\n",
      " 9946189 1331287 infeasible   69       -29.00000  -31.75768  9.51%  11.7 1045s\n",
      " 9995440 1326744     cutoff   80       -29.00000  -31.74780  9.48%  11.7 1050s\n",
      " 10039843 1319740  -30.63118   63   15  -29.00000  -31.73594  9.43%  11.7 1055s\n",
      " 10089866 1311812  -31.58708   60   26  -29.00000  -31.72205  9.39%  11.7 1060s\n",
      " 10140376 1302977 infeasible   73       -29.00000  -31.70714  9.33%  11.7 1065s\n",
      " 10188315 1294706  -30.85806   68   11  -29.00000  -31.69381  9.29%  11.7 1070s\n",
      " 10237031 1286553  -30.69511   70   19  -29.00000  -31.68102  9.24%  11.7 1075s\n",
      " 10288551 1276466 infeasible   67       -29.00000  -31.66667  9.20%  11.7 1080s\n",
      " 10331256 1272916 infeasible   61       -29.00000  -31.65940  9.17%  11.7 1085s\n",
      " 10381529 1263743  -30.66855   82   21  -29.00000  -31.64547  9.12%  11.7 1090s\n",
      " 10433930 1251370  -30.48286   76   26  -29.00000  -31.62758  9.06%  11.7 1095s\n",
      " 10481068 1240264  -31.00000   90    4  -29.00000  -31.61119  9.00%  11.7 1100s\n",
      " 10527733 1232290  -30.00000   69   26  -29.00000  -31.59943  8.96%  11.7 1105s\n",
      " 10571918 1221760  -31.00000   79    4  -29.00000  -31.58529  8.91%  11.7 1110s\n",
      " 10622063 1209138     cutoff   72       -29.00000  -31.56830  8.86%  11.7 1115s\n",
      " 10673566 1195614     cutoff   71       -29.00000  -31.55153  8.80%  11.7 1120s\n",
      " 10725675 1181678 infeasible   60       -29.00000  -31.53452  8.74%  11.7 1125s\n",
      " 10777488 1165402 infeasible   77       -29.00000  -31.51286  8.67%  11.7 1130s\n",
      " 10830119 1143176 infeasible   63       -29.00000  -31.50000  8.62%  11.8 1135s\n",
      " 10867816 1146103  -31.00000   78   26  -29.00000  -31.50000  8.62%  11.8 1140s\n",
      " 10914148 1148971  -31.00000   68   14  -29.00000  -31.50000  8.62%  11.8 1145s\n",
      " 10953342 1146573  -31.00000   75    4  -29.00000  -31.49607  8.61%  11.8 1150s\n",
      " 11005970 1129093 infeasible   73       -29.00000  -31.47214  8.52%  11.8 1155s\n",
      " 11059774 1111361  -30.00000   69    4  -29.00000  -31.44641  8.44%  11.8 1160s\n",
      " 11110056 1093103  -31.28062   75   21  -29.00000  -31.42027  8.35%  11.8 1165s\n",
      " 11162474 1074314  -30.60698   79   15  -29.00000  -31.39381  8.25%  11.8 1170s\n",
      " 11216223 1054012 infeasible   61       -29.00000  -31.36318  8.15%  11.8 1175s\n",
      " 11268657 1036610  -30.83012   78   17  -29.00000  -31.33333  8.05%  11.8 1180s\n",
      " 11321953 1016451 infeasible   61       -29.00000  -31.30150  7.94%  11.8 1185s\n",
      " 11376073 991492 infeasible   56       -29.00000  -31.25712  7.78%  11.8 1190s\n",
      " 11426354 969190  -31.09559   65   18  -29.00000  -31.21237  7.63%  11.8 1195s\n",
      " 11474605 945156  -30.00000   71    4  -29.00000  -31.16457  7.46%  11.8 1200s\n",
      " 11534267 913165 infeasible   67       -29.00000  -31.09228  7.21%  11.8 1205s\n",
      " 11586827 884692 infeasible   62       -29.00000  -31.02726  6.99%  11.8 1210s\n",
      " 11638235 851033     cutoff   82       -29.00000  -31.00000  6.90%  11.8 1215s\n",
      " 11689853 843294  -30.16575   79    6  -29.00000  -31.00000  6.90%  11.8 1220s\n",
      " 11742456 836948     cutoff   75       -29.00000  -31.00000  6.90%  11.8 1225s\n",
      " 11794688 830281 infeasible   75       -29.00000  -31.00000  6.90%  11.8 1230s\n",
      " 11840763 824030  -30.87606   76   21  -29.00000  -31.00000  6.90%  11.8 1235s\n",
      " 11893026 819850  -30.72184   76   22  -29.00000  -31.00000  6.90%  11.8 1240s\n",
      " 11939369 816465     cutoff   67       -29.00000  -31.00000  6.90%  11.8 1245s\n",
      " 11986823 812913 infeasible   71       -29.00000  -31.00000  6.90%  11.8 1250s\n",
      " 12043015 808026  -30.00000   77    4  -29.00000  -31.00000  6.90%  11.8 1255s\n",
      " 12088984 804537 infeasible   67       -29.00000  -31.00000  6.90%  11.8 1260s\n",
      " 12140764 798379  -30.00000   76    4  -29.00000  -31.00000  6.90%  11.8 1265s\n",
      " 12188021 794008  -30.85430   65   20  -29.00000  -31.00000  6.90%  11.8 1270s\n",
      " 12237821 790997  -30.80508   65    8  -29.00000  -31.00000  6.90%  11.8 1275s\n",
      " 12290879 788197  -30.44694   65   10  -29.00000  -31.00000  6.90%  11.8 1280s\n",
      " 12341786 785300  -31.00000   65   13  -29.00000  -31.00000  6.90%  11.8 1285s\n",
      " 12397924 781568  -30.49720   68   10  -29.00000  -31.00000  6.90%  11.8 1290s\n",
      " 12443472 778834  -31.00000   48   11  -29.00000  -31.00000  6.90%  11.8 1295s\n",
      " 12493738 775340 infeasible   66       -29.00000  -31.00000  6.90%  11.8 1300s\n",
      " 12543886 771492 infeasible   77       -29.00000  -31.00000  6.90%  11.8 1305s\n",
      " 12599302 768243  -31.00000   59    4  -29.00000  -31.00000  6.90%  11.8 1310s\n",
      " 12648403 766114  -30.31498   74   12  -29.00000  -31.00000  6.90%  11.8 1315s\n",
      " 12694093 763283  -31.00000   73    6  -29.00000  -31.00000  6.90%  11.8 1320s\n",
      " 12743041 760077 infeasible   71       -29.00000  -31.00000  6.90%  11.8 1325s\n",
      " 12793474 756883 infeasible   57       -29.00000  -31.00000  6.90%  11.8 1330s\n",
      " 12842084 754709  -30.66924   60   28  -29.00000  -31.00000  6.90%  11.8 1335s\n",
      " 12893413 752573  -30.67578   64   11  -29.00000  -31.00000  6.90%  11.8 1340s\n",
      " 12936996 750407  -31.00000   65   15  -29.00000  -31.00000  6.90%  11.8 1345s\n",
      " 12987080 747976  -30.70982   55   18  -29.00000  -31.00000  6.90%  11.8 1350s\n",
      " 13037032 745234  -31.00000   54   17  -29.00000  -31.00000  6.90%  11.8 1355s\n",
      " 13083621 742658  -30.97236   74   11  -29.00000  -31.00000  6.90%  11.8 1360s\n",
      " 13136445 739923  -30.76446   65   17  -29.00000  -31.00000  6.90%  11.8 1365s\n",
      " 13186891 737406     cutoff   84       -29.00000  -31.00000  6.90%  11.8 1370s\n",
      " 13240296 735571  -31.00000   69    9  -29.00000  -31.00000  6.90%  11.8 1375s\n",
      " 13283260 733820  -30.36946   68   15  -29.00000  -31.00000  6.90%  11.8 1380s\n",
      " 13329179 733074  -31.00000   67    4  -29.00000  -31.00000  6.90%  11.8 1385s\n",
      " 13377681 731643  -30.00000   71   18  -29.00000  -31.00000  6.90%  11.8 1390s\n",
      " 13425478 730070 infeasible   76       -29.00000  -31.00000  6.90%  11.8 1395s\n",
      " 13469029 728801  -30.58715   76    8  -29.00000  -31.00000  6.90%  11.8 1400s\n",
      " 13518175 727576  -30.31235   74   15  -29.00000  -31.00000  6.90%  11.8 1405s\n",
      " 13562142 726409     cutoff   66       -29.00000  -31.00000  6.90%  11.8 1410s\n",
      " 13614239 724948 infeasible   61       -29.00000  -31.00000  6.90%  11.8 1415s\n",
      " 13663083 724345  -30.75587   68    8  -29.00000  -31.00000  6.90%  11.8 1420s\n",
      " 13709618 723739  -31.00000   72   22  -29.00000  -31.00000  6.90%  11.8 1425s\n",
      " 13756879 722897  -31.00000   52    8  -29.00000  -31.00000  6.90%  11.8 1430s\n",
      " 13773852 722539  -31.00000   83   16  -29.00000  -31.00000  6.90%  11.8 1447s\n",
      " 13778399 722472  -30.55587   73   10  -29.00000  -31.00000  6.90%  11.8 1462s\n",
      " 13782995 722412 infeasible   69       -29.00000  -31.00000  6.90%  11.8 1479s\n",
      " 13787650 722326 infeasible   66       -29.00000  -31.00000  6.90%  11.8 1494s\n",
      " 13792103 722256 infeasible   61       -29.00000  -31.00000  6.90%  11.8 1509s\n",
      " 13796650 722051  -30.79037   85    6  -29.00000  -31.00000  6.90%  11.8 1522s\n",
      " 13799857 721952  -31.00000   66    9  -29.00000  -31.00000  6.90%  11.8 1538s\n",
      " 13804580 721854  -30.00000   70   12  -29.00000  -31.00000  6.90%  11.8 1553s\n",
      " 13808989 721630 infeasible   70       -29.00000  -31.00000  6.90%  11.8 1568s\n",
      " 13813314 721532  -30.13891   77   10  -29.00000  -31.00000  6.90%  11.8 1583s\n",
      " 13817850 721457 infeasible   86       -29.00000  -31.00000  6.90%  11.8 1599s\n",
      " 13822376 721411  -30.80148   54   10  -29.00000  -31.00000  6.90%  11.8 1613s\n",
      " 13825924 721183 infeasible   58       -29.00000  -31.00000  6.90%  11.8 1628s\n",
      " 13830342 721159 infeasible   74       -29.00000  -31.00000  6.90%  11.8 1644s\n",
      " 13835266 720969     cutoff   64       -29.00000  -31.00000  6.90%  11.8 1659s\n",
      " 13839855 720912  -30.00000   86   22  -29.00000  -31.00000  6.90%  11.8 1674s\n",
      " 13844254 720739  -30.99513   83   34  -29.00000  -31.00000  6.90%  11.8 1688s\n",
      " 13848296 720648  -31.00000   59    4  -29.00000  -31.00000  6.90%  11.8 1704s\n",
      " 13852917 720524  -31.00000   60    6  -29.00000  -31.00000  6.90%  11.8 1719s\n",
      " 13857334 720418  -31.00000   69    8  -29.00000  -31.00000  6.90%  11.8 1733s\n",
      " 13861355 720282 infeasible   79       -29.00000  -31.00000  6.90%  11.8 1747s\n",
      " 13865752 720211     cutoff   65       -29.00000  -31.00000  6.90%  11.8 1762s\n",
      " 13870071 720171 infeasible   73       -29.00000  -31.00000  6.90%  11.8 1776s\n",
      " 13874589 720073  -31.00000   63    4  -29.00000  -31.00000  6.90%  11.8 1788s\n",
      " 13878439 720028 infeasible   70       -29.00000  -31.00000  6.90%  11.8 1803s\n",
      " 13882951 719970 infeasible   76       -29.00000  -31.00000  6.90%  11.8 1818s\n",
      " 13887407 719921  -30.00000   70    6  -29.00000  -31.00000  6.90%  11.8 1834s\n",
      " 13891843 719823  -31.00000   73   11  -29.00000  -31.00000  6.90%  11.8 1847s\n",
      " 13895890 719705 infeasible   78       -29.00000  -31.00000  6.90%  11.8 1861s\n",
      " 13899766 719659 infeasible   63       -29.00000  -31.00000  6.90%  11.8 1871s\n",
      " 13934240 718879  -30.00000   78    9  -29.00000  -31.00000  6.90%  11.8 1875s\n",
      " 13982216 717906     cutoff   64       -29.00000  -31.00000  6.90%  11.8 1880s\n",
      " 14029710 716918  -31.00000   70   10  -29.00000  -31.00000  6.90%  11.8 1885s\n",
      " 14075375 716045 infeasible   73       -29.00000  -31.00000  6.90%  11.8 1890s\n",
      " 14122689 715017 infeasible   69       -29.00000  -31.00000  6.90%  11.8 1895s\n",
      " 14169392 713873 infeasible   71       -29.00000  -31.00000  6.90%  11.8 1900s\n",
      " 14207867 713010  -30.00000   55    8  -29.00000  -31.00000  6.90%  11.8 1905s\n",
      " 14249763 711997  -31.00000   57    4  -29.00000  -31.00000  6.90%  11.8 1910s\n",
      " 14295641 710838  -30.25237   69   16  -29.00000  -31.00000  6.90%  11.8 1915s\n",
      " 14337762 709988 infeasible   82       -29.00000  -31.00000  6.90%  11.8 1920s\n",
      " 14384049 709185     cutoff   75       -29.00000  -31.00000  6.90%  11.8 1925s\n",
      " 14429585 708359  -31.00000   76    4  -29.00000  -31.00000  6.90%  11.8 1930s\n",
      " 14476063 707350 infeasible   67       -29.00000  -31.00000  6.90%  11.8 1935s\n",
      " 14517199 705974  -30.92298   65   17  -29.00000  -31.00000  6.90%  11.8 1940s\n",
      " 14563022 704886  -30.00000   69   23  -29.00000  -31.00000  6.90%  11.8 1945s\n",
      " 14608369 703619  -30.85866   70   16  -29.00000  -31.00000  6.90%  11.8 1950s\n",
      " 14653466 702160  -31.00000   65    6  -29.00000  -31.00000  6.90%  11.8 1955s\n",
      " 14697985 700621  -31.00000   54    6  -29.00000  -31.00000  6.90%  11.8 1960s\n",
      " 14745192 699372 infeasible   70       -29.00000  -31.00000  6.90%  11.8 1965s\n",
      " 14795982 698592  -30.00000   64    6  -29.00000  -31.00000  6.90%  11.9 1970s\n",
      " 14840160 697270  -30.33853   80   10  -29.00000  -31.00000  6.90%  11.9 1975s\n",
      " 14886262 696039 infeasible   73       -29.00000  -31.00000  6.90%  11.9 1980s\n",
      " 14934639 694502 infeasible   62       -29.00000  -31.00000  6.90%  11.9 1985s\n",
      " 14983244 692667  -30.85922   82   26  -29.00000  -31.00000  6.90%  11.9 1990s\n",
      " 15028764 691159  -30.00000   61    8  -29.00000  -31.00000  6.90%  11.9 1995s\n",
      " 15072649 689550  -30.00000   76    9  -29.00000  -31.00000  6.90%  11.9 2000s\n",
      " 15113530 688310  -30.00000   63   15  -29.00000  -31.00000  6.90%  11.9 2005s\n",
      " 15154324 687218 infeasible   80       -29.00000  -31.00000  6.90%  11.9 2010s\n",
      " 15198165 685445     cutoff   67       -29.00000  -31.00000  6.90%  11.9 2015s\n",
      " 15243216 684391  -31.00000  105    6  -29.00000  -31.00000  6.90%  11.9 2020s\n",
      " 15290912 683238  -31.00000   62    8  -29.00000  -31.00000  6.90%  11.9 2025s\n",
      " 15335678 681876  -31.00000   62    4  -29.00000  -31.00000  6.90%  11.9 2030s\n",
      " 15379165 680521 infeasible   81       -29.00000  -31.00000  6.90%  11.9 2035s\n",
      " 15423385 679391  -30.79822   82   11  -29.00000  -31.00000  6.90%  11.9 2040s\n",
      " 15467601 678662  -31.00000   67    8  -29.00000  -31.00000  6.90%  11.9 2045s\n",
      " 15507390 677304 infeasible   82       -29.00000  -31.00000  6.90%  11.9 2050s\n",
      " 15551180 675722  -30.40306   80    9  -29.00000  -31.00000  6.90%  11.9 2055s\n",
      " 15595139 674081  -30.90356   88   35  -29.00000  -31.00000  6.90%  11.9 2060s\n",
      " 15638244 672912 infeasible   66       -29.00000  -31.00000  6.90%  11.9 2065s\n",
      " 15681656 671891 infeasible   77       -29.00000  -31.00000  6.90%  11.9 2070s\n",
      " 15729023 670568 infeasible   70       -29.00000  -31.00000  6.90%  11.9 2075s\n",
      " 15768893 669279 infeasible   71       -29.00000  -31.00000  6.90%  11.9 2080s\n",
      " 15810528 667814 infeasible   77       -29.00000  -31.00000  6.90%  11.9 2085s\n",
      " 15849614 666969  -30.57139   62    8  -29.00000  -31.00000  6.90%  11.9 2090s\n",
      " 15896546 665074 infeasible   62       -29.00000  -31.00000  6.90%  11.9 2095s\n",
      " 15944764 663536  -31.00000   75    6  -29.00000  -31.00000  6.90%  11.9 2100s\n",
      " 15985609 662767  -30.50551   66    6  -29.00000  -31.00000  6.90%  11.9 2105s\n",
      " 16028711 661427 infeasible   66       -29.00000  -31.00000  6.90%  11.9 2110s\n",
      " 16072578 660151 infeasible   73       -29.00000  -31.00000  6.90%  11.9 2115s\n",
      " 16113218 658765 infeasible   85       -29.00000  -31.00000  6.90%  11.9 2120s\n",
      " 16159388 657030 infeasible   68       -29.00000  -31.00000  6.90%  11.9 2125s\n",
      " 16199777 656213 infeasible   69       -29.00000  -31.00000  6.90%  11.9 2130s\n",
      " 16244913 654926 infeasible   74       -29.00000  -31.00000  6.90%  11.9 2135s\n",
      " 16291713 653139  -30.92109   56   33  -29.00000  -31.00000  6.90%  11.9 2140s\n",
      " 16333218 652184  -30.67962   68   12  -29.00000  -31.00000  6.90%  11.9 2145s\n",
      " 16375774 652743     cutoff   63       -29.00000  -31.00000  6.90%  11.9 2150s\n",
      " 16422189 654687     cutoff   67       -29.00000  -31.00000  6.90%  11.9 2155s\n",
      " 16467670 654932 infeasible   67       -29.00000  -31.00000  6.90%  11.9 2160s\n",
      " 16515414 647260 infeasible   97       -29.00000  -30.98505  6.84%  11.9 2165s\n",
      " 16564797 633185 infeasible   57       -29.00000  -30.95392  6.74%  11.9 2170s\n",
      " 16611942 619668 infeasible   79       -29.00000  -30.92641  6.64%  11.9 2175s\n",
      " 16664073 606613 infeasible   70       -29.00000  -30.90156  6.56%  11.9 2180s\n",
      " 16713452 592731  -30.87659   93   27  -29.00000  -30.87951  6.48%  11.9 2185s\n",
      " 16766341 575444  -30.00000   77   16  -29.00000  -30.85220  6.39%  11.9 2190s\n",
      " 16815115 557003 infeasible   57       -29.00000  -30.82371  6.29%  11.9 2195s\n",
      " 16870213 534475 infeasible   58       -29.00000  -30.78775  6.16%  11.9 2200s\n",
      " 16924185 509973 infeasible   82       -29.00000  -30.74564  6.02%  11.9 2205s\n",
      " 16974526 483789     cutoff   78       -29.00000  -30.69265  5.84%  11.9 2210s\n",
      " 17030749 456038 infeasible   63       -29.00000  -30.62957  5.62%  11.9 2215s\n",
      " 17084344 422456 infeasible   71       -29.00000  -30.54320  5.32%  11.9 2220s\n",
      " 17132094 404149  -30.00000   78   10  -29.00000  -30.50000  5.17%  11.9 2225s\n",
      " 17195479 362715  -30.00000   56    6  -29.00000  -30.33333  4.60%  11.9 2230s\n",
      " 17252538 317800 infeasible   57       -29.00000  -30.00000  3.45%  11.9 2235s\n",
      " 17299565 301025     cutoff   70       -29.00000  -30.00000  3.45%  11.9 2240s\n",
      " 17344256 285609 infeasible   64       -29.00000  -30.00000  3.45%  11.9 2245s\n",
      " 17389724 271165  -30.00000   54    8  -29.00000  -30.00000  3.45%  11.9 2250s\n",
      " 17435403 255481  -30.00000   75    9  -29.00000  -30.00000  3.45%  11.9 2255s\n",
      " 17480781 241916     cutoff   61       -29.00000  -30.00000  3.45%  11.9 2260s\n",
      " 17520278 230092 infeasible   55       -29.00000  -30.00000  3.45%  11.9 2265s\n",
      " 17564805 217514 infeasible   69       -29.00000  -30.00000  3.45%  11.9 2270s\n",
      " 17613515 203796 infeasible   71       -29.00000  -30.00000  3.45%  11.9 2275s\n",
      " 17658008 190933  -30.00000   60    4  -29.00000  -30.00000  3.45%  11.9 2280s\n",
      " 17705662 176829  -30.00000   76    9  -29.00000  -30.00000  3.45%  11.9 2285s\n",
      " 17746268 166397     cutoff   74       -29.00000  -30.00000  3.45%  11.9 2290s\n",
      " 17790489 157362  -30.00000   84   10  -29.00000  -30.00000  3.45%  11.9 2295s\n",
      " 17834689 147408  -30.00000   69    6  -29.00000  -30.00000  3.45%  11.9 2300s\n",
      " 17875062 139317 infeasible   77       -29.00000  -30.00000  3.45%  11.9 2305s\n",
      " 17915285 130918  -30.00000   97   10  -29.00000  -30.00000  3.45%  11.9 2310s\n",
      " 17959025 122081     cutoff   76       -29.00000  -30.00000  3.45%  11.9 2315s\n",
      " 17998720 113987     cutoff   67       -29.00000  -30.00000  3.45%  11.9 2320s\n",
      " 18041700 105170     cutoff   63       -29.00000  -30.00000  3.45%  11.9 2325s\n",
      " 18078585 97886 infeasible   67       -29.00000  -30.00000  3.45%  11.9 2330s\n",
      " 18118765 89132  -30.00000   74    4  -29.00000  -30.00000  3.45%  11.9 2335s\n",
      " 18158512 80409  -30.00000   62    8  -29.00000  -30.00000  3.45%  11.9 2340s\n",
      " 18203639 70210  -30.00000   68    9  -29.00000  -30.00000  3.45%  11.9 2345s\n",
      " 18247523 61024  -30.00000   66    8  -29.00000  -30.00000  3.45%  11.9 2350s\n",
      " 18284754 54099 infeasible   60       -29.00000  -30.00000  3.45%  11.9 2355s\n",
      " 18325021 46851 infeasible   89       -29.00000  -30.00000  3.45%  11.9 2360s\n",
      " 18363533 39788 infeasible   76       -29.00000  -30.00000  3.45%  11.9 2365s\n",
      " 18405788 32629     cutoff   81       -29.00000  -30.00000  3.45%  11.9 2370s\n",
      " 18444677 25401  -30.00000   60    9  -29.00000  -30.00000  3.45%  11.9 2375s\n",
      " 18483578 17711  -30.00000   94   13  -29.00000  -30.00000  3.45%  11.9 2380s\n",
      " 18525078 10358  -30.00000   71   15  -29.00000  -30.00000  3.45%  11.9 2385s\n",
      " 18566645  2539     cutoff   70       -29.00000  -30.00000  3.45%  11.9 2390s\n",
      "\n",
      "Cutting planes:\n",
      "  Gomory: 47\n",
      "  Cover: 2\n",
      "  Projected implied bound: 6\n",
      "  Clique: 10\n",
      "  MIR: 6\n",
      "  StrongCG: 2\n",
      "  Flow cover: 16\n",
      "  Zero half: 6\n",
      "\n",
      "Explored 18582402 nodes (221669439 simplex iterations) in 2391.69 seconds (4919.22 work units)\n",
      "Thread count was 8 (of 8 available processors)\n",
      "\n",
      "Solution count 10: -29 -29 -28 ... -18\n",
      "No other solutions better than -29\n",
      "\n",
      "Optimal solution found (tolerance 1.00e-04)\n",
      "Best objective -2.900000000000e+01, best bound -2.900000000000e+01, gap 0.0000%\n",
      "\n",
      "---------------------------------------------------------------------------\n",
      "Multi-objectives: solved in 2391.69 seconds (4919.22 work units), solution count 10\n",
      "\n"
     ]
    }
   ],
   "source": [
    "m.optimize()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "22b2ee1e",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'float' object has no attribute '__cindex__'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/40/khdb0r0d62q_c42_9lq8c1cc0000gn/T/ipykernel_893/1401418354.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mvals\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetAttr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'x'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvars\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetAttr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'x'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mselected\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtuplelist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mj\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mj\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mvals\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeys\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mvals\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mj\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0.5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32msrc/gurobipy/model.pxi\u001b[0m in \u001b[0;36mgurobipy.Model.getAttr\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'float' object has no attribute '__cindex__'"
     ]
    }
   ],
   "source": [
    "vals = m.getAttr('x', vars)\n",
    "t = m.getAttr('x', t)\n",
    "\n",
    "selected = gp.tuplelist((i, j) for i, j in vals.keys() if vals[i, j] > 0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b01838e3",
   "metadata": {},
   "source": [
    "-------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0871925b",
   "metadata": {},
   "source": [
    "## Reward Total"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0b44e22",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# Find Total Reward of Route\n",
    "total = 0\n",
    "for i in capitals_minus:\n",
    "    total = total + (ride_stop[i].X* reward[i])\n",
    "    \n",
    "print('Total Reward: ', total)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55f45256",
   "metadata": {},
   "source": [
    "-------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cfc5e21e",
   "metadata": {},
   "source": [
    "## Walking Distance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1d04e9a0",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "d = distance_matrix['Distance Walk'] # add to data fram\n",
    "\n",
    "# Change enteries in meters to km\n",
    "for i in range(0,1225):\n",
    "    if d[i] >= 1.0:\n",
    "        temp = d[i]\n",
    "        d[i] = temp/1000\n",
    "        \n",
    "distance_matrix['Distance Walk'] = d # add to data fram\n",
    "\n",
    "# convert to dictionary\n",
    "walk = {(row['Origin'], row['Destination']): row['Distance Walk'] for _, row in distance_matrix.iterrows()}\n",
    "\n",
    "# Find total walking distance\n",
    "total = 0\n",
    "for i, j in dist.keys():\n",
    "    total = total + walk[i,j]*vals[i,j]\n",
    "\n",
    "# Convert to Miles\n",
    "miles = total/1.609\n",
    "\n",
    "print('Total miles walked: ', miles)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24aa7a27",
   "metadata": {},
   "source": [
    "-------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eeb8d3b0",
   "metadata": {},
   "source": [
    "## Find Full Path"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "64dd8e67",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Pirates of the Caribbean 1',\n",
       " 'Indiana Jones Adventure 2',\n",
       " 'Pirates of the Caribbean 2',\n",
       " 'Indiana Jones Adventure 1',\n",
       " 'Big Thunder Mountain Railway 1',\n",
       " 'The Golden Horseshoe - L',\n",
       " 'Big Thunder Mountain Railway 2',\n",
       " 'Star Wars: Rise of Resistance 2',\n",
       " 'Splash Mountain 1',\n",
       " 'Star Wars: Rise of Resistance 1',\n",
       " 'Its a Small World 2',\n",
       " 'Troubadour Tavern - D',\n",
       " 'Its a Small World 1',\n",
       " 'Matterhorn Bobsleds 1',\n",
       " 'Space Mountain 1',\n",
       " 'Fireworks',\n",
       " 'Space Mountain 2']"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# find path not including Entrance and Exit\n",
    "visited = {}\n",
    "\n",
    "for i in capitals_food:\n",
    "    visited[i] = 0\n",
    "\n",
    "# Start at Entrance\n",
    "path = []\n",
    "path.append('Entrance')\n",
    "visited['Entrance'] = 1\n",
    "\n",
    "\n",
    "# Where to go from Entrance\n",
    "for i in capitals_food:\n",
    "        if vals['Entrance', i] == 1:\n",
    "            visited[i] = 1\n",
    "            path.append(i)\n",
    "            break\n",
    "\n",
    "# Continue from Entrance on path\n",
    "while len(path) < 19:\n",
    "    index = len(path) - 1\n",
    "    temp = path[index]\n",
    "    for i in capitals_food:\n",
    "        if visited[i] == 0:\n",
    "             if vals[temp, i] == 1:\n",
    "                visited[i] = 1\n",
    "                path.append(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e54a75d",
   "metadata": {},
   "source": [
    "-------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a066c51b",
   "metadata": {},
   "source": [
    "## Itenerary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "2ad6c9d3",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Pirates of the Caribbean 1': '8:05 am',\n",
       " 'Indiana Jones Adventure 2': '8:39 am',\n",
       " 'Pirates of the Caribbean 2': '9:33 am',\n",
       " 'Indiana Jones Adventure 1': '10:07 am',\n",
       " 'Big Thunder Mountain Railway 1': '11:02 am',\n",
       " 'The Golden Horseshoe - L': '11:40 am',\n",
       " 'Big Thunder Mountain Railway 2': '12:26 pm',\n",
       " 'Star Wars: Rise of Resistance 2': '1:08 pm',\n",
       " 'Splash Mountain 1': '3:10 pm',\n",
       " 'Star Wars: Rise of Resistance 1': '4:06 pm',\n",
       " 'Its a Small World 2': '6:12 pm',\n",
       " 'Troubadour Tavern - D': '6:41 pm',\n",
       " 'Its a Small World 1': '7:47 pm',\n",
       " 'Matterhorn Bobsleds 1': '8:17 pm',\n",
       " 'Space Mountain 1': '9:02 pm',\n",
       " 'Fireworks': '10:00 pm',\n",
       " 'Space Mountain 2': '11:00 pm'}"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# [Timestamp] Print out the timestamp that a guest arrives at each ride on the route\n",
    "import datetime\n",
    "\n",
    "timestamp = {}\n",
    "\n",
    "for i in t:\n",
    "    time = t[i] + 8*60 #gets zero to be 8am\n",
    "    # Calculate PM times\n",
    "    if time > 720:\n",
    "        half = \"pm\"\n",
    "        hour, minutes = divmod(time, 60)\n",
    "        correct_hour = hour - 12\n",
    "        if correct_hour == 0:\n",
    "            correct_hour = 12\n",
    "    # Calculate AM times\n",
    "    else: \n",
    "        half = \"am\"\n",
    "        correct_hour, minutes = divmod(time, 60)\n",
    "        # format min less than 10 so there is a zero before the number\n",
    "    if minutes < 10:\n",
    "        minutes = '0{min}'.format(min = int(minutes))\n",
    "    else:\n",
    "        minutes = int(minutes)\n",
    "    result = '{hour}:{mins} {xm}'.format(hour = int(correct_hour), mins = minutes, xm = half)\n",
    "    timestamp[i] = result\n",
    "\n",
    "    \n",
    "# [Iternerary] print out the time stamps in order of the path\n",
    "iten = {}\n",
    "\n",
    "for i in path:\n",
    "    iten[i] = timestamp[i]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d27cff9",
   "metadata": {},
   "source": [
    "-------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f8d8ce4",
   "metadata": {},
   "source": [
    "## Find Path without Entrance or Exit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "24fdd9d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# find path not including Entrance and Exit\n",
    "visited = {}\n",
    "\n",
    "for i in capitals_food:\n",
    "    visited[i] = 0\n",
    "\n",
    "# Start at Entrance\n",
    "path = []\n",
    "visited['Entrance'] = 1\n",
    "\n",
    "\n",
    "# Where to go from Entrance\n",
    "for i in capitals_food:\n",
    "        if vals['Entrance', i] == 1:\n",
    "            visited[i] = 1\n",
    "            path.append(i)\n",
    "            break\n",
    "\n",
    "# Continue from Entrance on path\n",
    "while len(path) < 17:\n",
    "    index = len(path) - 1\n",
    "    temp = path[index]\n",
    "    for i in capitals_food:\n",
    "        if visited[i] == 0:\n",
    "             if vals[temp, i] == 1:\n",
    "                visited[i] = 1\n",
    "                path.append(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16f8b73b",
   "metadata": {},
   "source": [
    "-------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1bcd4b7",
   "metadata": {},
   "source": [
    "# Mapping"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e7bb49d",
   "metadata": {},
   "source": [
    "### Load Coordinates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6cac4fb5",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# create dictionary of latitude and longitude for each ride\n",
    "lat_long = pd.read_csv('Lat_Long_trides.csv',index_col=0)\n",
    "\n",
    "# ride name as key with (lat, long) as values\n",
    "coordinates = {(row['Ride']): (row['Latitude'], row['Longitude']) for _, row in lat_long.iterrows()}\n",
    "\n",
    "# because coordinates are similar, change to slightly different coordinates for marker on map\n",
    "coordinates['Pirates of the Caribbean 1'] = (33.811757, -117.9207289)\n",
    "coordinates['Pirates of the Caribbean 2'] = (33.811757, -117.9207289)\n",
    "coordinates['Exit'] = ((33.809997, -118.9189785))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "05d38c34",
   "metadata": {},
   "source": [
    "### Map Route and Stops"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5d332aca",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Map the route using google maps static maps\n",
    "\n",
    "# [Waypoints] use path to create waypoints that the route must go through\n",
    "waypoints = []\n",
    "\n",
    "for i in path:\n",
    "    waypoints.append(coordinates[i])\n",
    "    \n",
    "    \n",
    "# [Direction] get step by step directions from Entrance to Exit through waypoints\n",
    "results = gmaps.directions(origin = coordinates['Entrance'], destination = coordinates['Entrance'], mode = 'walking', waypoints= waypoints)\n",
    "\n",
    "\n",
    "# [Mapping] Plot on map\n",
    "marker_points = []\n",
    "waypoints = []\n",
    "\n",
    "#extract the location (lat and long) of each turn from the previous directions function\n",
    "for leg in results[0][\"legs\"]:\n",
    "    # adds a marker for each starting waypoint\n",
    "    leg_start_loc = leg[\"start_location\"]\n",
    "    marker_points.append(f'{leg_start_loc[\"lat\"]},{leg_start_loc[\"lng\"]}')\n",
    "    for step in leg[\"steps\"]:\n",
    "        # adds a point for each turn on the way to the next ride on path\n",
    "        end_loc = step[\"end_location\"]\n",
    "        waypoints.append(f'{end_loc[\"lat\"]},{end_loc[\"lng\"]}')\n",
    "# adds a marker for the last ride on path\n",
    "last_stop = results[0][\"legs\"][-1][\"end_location\"]\n",
    "marker_points.append(f'{last_stop[\"lat\"]},{last_stop[\"lng\"]}')\n",
    " \n",
    "# labels all marker points (all rides on path) with a letter\n",
    "markers = [ \"color:red|size:mid|label:\" + chr(65+i) + \"|\" \n",
    "           + r for i, r in enumerate(marker_points)]\n",
    "\n",
    "# Change color of markers and move the second visit to each ride over so it can be seen\n",
    "markers[1] = 'color:purple|size:mid|label:C|33.811357, -117.9207289' # Pirates 1\n",
    "markers[2] = 'color:white|size:mid|label:B|33.8117056,-117.9206731' # Indiana Jones 1\n",
    "markers[3] = 'color:purple|size:mid|label:E|33.811357, -117.9204289'# Pirates 2\n",
    "markers[4] = 'color:white|size:mid|label:D|33.8117056,-117.9203731' # Indiana Jones 2\n",
    "markers[5] = 'color:yellow|size:mid|label:F|33.8124758,-117.9203355' # Big Thunder 1\n",
    "markers[6] = 'color:green|size:mid|label:G|33.8121265,-117.9202446' # LUNCH\n",
    "markers[7] = 'color:yellow|size:mid|label:H|33.8124758,-117.9200355' #Big Thunder 2\n",
    "markers[8] = 'color:black|size:mid|label:I|33.8137067,-117.9231294' # Star Wars 1\n",
    "markers[9] = 'color:red|size:mid|label:J|33.8122899,-117.9224001' # Splash\n",
    "markers[10] = 'color:black|size:mid|label:K|33.8137067,-117.9228294' # Star Wars 2\n",
    "markers[11] = 'color:orange|size:mid|label:L|33.8143046,-117.9178047' # Small World 1\n",
    "markers[12] = 'color:green|size:mid|label:M|33.81455529999999,-117.9187207' # Dinner\n",
    "markers[13] = 'color:orange|size:mid|label:N|33.8143046,-117.9175047' # Small World 2\n",
    "markers[14] = 'color:red|size:mid|label:O|33.8130703, -117.9178203' # Matterhorn\n",
    "markers[15] = 'color:blue|size:mid|label:P|33.8116723,-117.9173565' # Space 1\n",
    "markers[16] = 'color:red|size:mid|label:Q|33.8127953,-117.9189839' # Fireworks\n",
    "markers[17] = 'color:blue|size:mid|label:R|33.8116723,-117.9170565' # Space 2\n",
    "\n",
    "\n",
    "# [Print Map]\n",
    "result_map = gmaps.static_map(\n",
    "                 center = [33.812252236772736, -117.91894201571984],\n",
    "                 scale=2, \n",
    "                 zoom=16.95,\n",
    "                 size=[640, 640], \n",
    "                 format=\"jpg\", \n",
    "                 maptype=\"satellite\",\n",
    "                 markers=markers,\n",
    "                 path=\"geodesic:TRUE|color:0x0000ff|weight:2|\" + \"|\".join(waypoints))\n",
    "\n",
    "# [Save Map]\n",
    "with open('[Thesis]Prioritization_Complication_Map.jpg', 'wb') as img:\n",
    "    for chunk in result_map:\n",
    "        img.write(chunk)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
