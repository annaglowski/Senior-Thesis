{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "695946a5",
   "metadata": {},
   "source": [
    "### Importing "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8c46c3da",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "42739214",
   "metadata": {},
   "outputs": [],
   "source": [
    "import googlemaps\n",
    "from datetime import datetime\n",
    "\n",
    "gmaps = googlemaps.Client(key= # Google Maps API Key here)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "65de5bde",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Current working directory: /Users/annaglowski\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import csv\n",
    "import os\n",
    "import numpy as np\n",
    "\n",
    "# Get the current working directory\n",
    "cwd = os.getcwd()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cdfdbcaf",
   "metadata": {},
   "source": [
    "-------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60b69c8e",
   "metadata": {},
   "source": [
    "# Ride Data Functions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66a1030d",
   "metadata": {},
   "source": [
    "### Average Hourly Wait Time (per month)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5e29ca1c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate the average wait time across the hour (take the data from 5 min increments to one hour increments)\n",
    "\n",
    "# returns a vector of 12 months each with 24 hours of data\n",
    "\n",
    "def hourly_average_wt(df):\n",
    "    df['Date/Time'] = pd.to_datetime(df['Date/Time'])\n",
    "    df['hour'] = df['Date/Time'].dt.hour\n",
    "    \n",
    "    # average wait time by hour (1x24)\n",
    "    hourly_wt_av = []\n",
    "    \n",
    "    for t in range(0, 24):\n",
    "        temp = 0\n",
    "        j = 0\n",
    "        for hour, wait in zip(df['hour'], df['Wait Time']):\n",
    "            if hour == t: \n",
    "                j = j + 1\n",
    "                temp = temp + wait\n",
    "        if j == 0:\n",
    "            hourly_wt_av.append(0)\n",
    "        else:\n",
    "            hourly_wt_av.append(temp/j)\n",
    "        \n",
    "    return hourly_wt_av\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b7d10da",
   "metadata": {},
   "source": [
    "### Average Hourly Wait Time (for full year)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3581a68c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate the average hourly wait time over all months of the year for each ride\n",
    "\n",
    "# send in the monthly hourly wait time average array, the months array of data and the number \n",
    "# of months that have data\n",
    "#returns one vector of 24 hours (representing the ride itself over the full year)\n",
    "def hourly_av_wt_ride(hourly_wt_av, num_months):\n",
    "    \n",
    "    ride_hourly_wt_av = np.ones(24)\n",
    "\n",
    "    for month in range(0, num_months):\n",
    "        temp = 0\n",
    "        for t in range(0, 24):\n",
    "            temp = ride_hourly_wt_av[t] + hourly_wt_av[month][t]\n",
    "            ride_hourly_wt_av[t] = temp\n",
    "\n",
    "            \n",
    "    ride_hourly_wt_av = ride_hourly_wt_av/num_months\n",
    "    \n",
    "    return ride_hourly_wt_av\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f196685",
   "metadata": {},
   "source": [
    "### Single Wait Time Average"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "24577b02",
   "metadata": {},
   "outputs": [],
   "source": [
    "def overall_wt_av_ride(ride_yr_hrly_wt_av):\n",
    "    temp = 0\n",
    "    for i in range(7,24):\n",
    "        temp = temp + ride_yr_hrly_wt_av[i]\n",
    "\n",
    "    return temp/16\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50a7d058",
   "metadata": {},
   "source": [
    "-------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "907d0077",
   "metadata": {},
   "source": [
    "# Ride Data Input:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "78876c18",
   "metadata": {},
   "outputs": [],
   "source": [
    "hrly_wt_data = pd.DataFrame()\n",
    "overall_wt_data = []\n",
    "ride_time = []"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca5a27f4",
   "metadata": {},
   "source": [
    "### Entrance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "414978ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "entrance = gmaps.find_place('Disneyland Railroad - Main Street Entrance California', 'textquery', fields = ['formatted_address', 'geometry','place_id'])\n",
    "\n",
    "entrance_yr_hrly_wt_av = np.zeros(24)\n",
    "\n",
    "hrly_wt_data['Entrance'] = entrance_yr_hrly_wt_av\n",
    "\n",
    "overall_wt_data.append(0)\n",
    "\n",
    "ride_time.append(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c67a69b",
   "metadata": {},
   "source": [
    "### Small World"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "3814f5cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# load data\n",
    "months = ['jan', 'feb', 'mar', 'apr', 'may', 'june', 'jul', 'aug', 'sep', 'oct', \n",
    "          #'nov', \n",
    "          #'dec'\n",
    "         ]\n",
    "\n",
    "num_months = 10 \n",
    "\n",
    "hourly_wt_av = []\n",
    "\n",
    "for month in months:\n",
    "    df = pd.read_csv(r'/Users/annaglowski/Desktop/Thesis/Small_World/Small_World_%s.csv' % month.title())\n",
    "    hourly_wt_av.append(hourly_average_wt(df))\n",
    "\n",
    "# Average wait times by hour for one year\n",
    "small_world_yr_hrly_wt_av = hourly_av_wt_ride(hourly_wt_av, num_months) \n",
    "\n",
    "# Add to df\n",
    "hrly_wt_data['Its a Small World'] = small_world_yr_hrly_wt_av\n",
    "\n",
    "# Average wait time overall (single number)\n",
    "small_world_overall_wt_av = overall_wt_av_ride(small_world_yr_hrly_wt_av)\n",
    "\n",
    "# Add to df\n",
    "overall_wt_data.append(small_world_overall_wt_av)\n",
    "\n",
    "# ride time\n",
    "ride_time.append(14)\n",
    "\n",
    "# Get coordinates\n",
    "small_world = gmaps.find_place('Its a small world', 'textquery', fields = ['formatted_address', 'geometry','place_id'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58142237",
   "metadata": {},
   "source": [
    "### Space Mountain"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "8c57688e",
   "metadata": {},
   "outputs": [],
   "source": [
    "months = ['jan', 'feb', 'mar', 'apr', 'may', 'june', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']\n",
    "\n",
    "num_months = 12\n",
    "\n",
    "hourly_wt_av = []\n",
    "\n",
    "for month in months:\n",
    "    df = pd.read_csv(r'/Users/annaglowski/Desktop/Thesis/Space_Mt/Space_Mt_%s.csv' % month.title())\n",
    "    hourly_wt_av.append(hourly_average_wt(df))\n",
    "    \n",
    "# hourly wait time data \n",
    "space_mt_yr_hrly_wt_av = hourly_av_wt_ride(hourly_wt_av, num_months)    \n",
    "\n",
    "# Add to df\n",
    "hrly_wt_data['Space Mountain'] = space_mt_yr_hrly_wt_av\n",
    "\n",
    "# Overall average wait time (Single number)\n",
    "space_mt_overall_wt_av = overall_wt_av_ride(space_mt_yr_hrly_wt_av)\n",
    "\n",
    "# Add to df\n",
    "overall_wt_data.append(space_mt_overall_wt_av)\n",
    "\n",
    "# ride time\n",
    "ride_time.append(5)\n",
    "\n",
    "# Get coordinates\n",
    "space_mt = gmaps.find_place('Space Mountain (Disneyland)', 'textquery', fields = ['formatted_address', 'geometry','place_id'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d1d07bb",
   "metadata": {},
   "source": [
    "### Star Wars: Rise of Resistance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "a9bde215",
   "metadata": {},
   "outputs": [],
   "source": [
    "months = ['jan', 'feb', 'mar', 'apr', 'may', 'june', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']\n",
    "\n",
    "num_months = 12\n",
    "\n",
    "hourly_wt_av = []\n",
    "\n",
    "for month in months:\n",
    "    df = pd.read_csv(r'/Users/annaglowski/Desktop/Thesis/Star_Wars/Star_Wars_%s.csv' % month.title())\n",
    "    hourly_wt_av.append(hourly_average_wt(df))\n",
    "\n",
    "# hourly wait time average\n",
    "star_wars_yr_hrly_wt_av = hourly_av_wt_ride(hourly_wt_av, num_months)  \n",
    "\n",
    "# Add to df\n",
    "hrly_wt_data['Star Wars: Rise of Resistance'] = star_wars_yr_hrly_wt_av\n",
    "\n",
    "# Overall average wait time (single number)\n",
    "star_wars_overall_wt_av = overall_wt_av_ride(star_wars_yr_hrly_wt_av)\n",
    "\n",
    "# Add to df\n",
    "overall_wt_data.append(star_wars_overall_wt_av)\n",
    "\n",
    "# ride time\n",
    "ride_time.append(18)\n",
    "\n",
    "# Get coordinates\n",
    "star_wars = gmaps.find_place('Star Wars: Rise of Resistance', 'textquery', fields = ['formatted_address', 'geometry','place_id'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39a46cc1",
   "metadata": {},
   "source": [
    "### Indianna Jones Adventure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "ae4920bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "months = ['jan', 'feb', 'mar', 'apr', 'may', 'june', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']\n",
    "\n",
    "num_months = 12\n",
    "\n",
    "hourly_wt_av = []\n",
    "\n",
    "for month in months:\n",
    "    df = pd.read_csv(r'/Users/annaglowski/Desktop/Thesis/Indy_Jones/Indy_Jones_%s.csv' % month.title())\n",
    "    hourly_wt_av.append(hourly_average_wt(df))\n",
    "\n",
    "# Hourly average wait time\n",
    "indy_jones_yr_hrly_wt_av = hourly_av_wt_ride(hourly_wt_av, num_months)  \n",
    "\n",
    "# Add to df\n",
    "hrly_wt_data['Indiana Jones Adventure'] = indy_jones_yr_hrly_wt_av\n",
    "\n",
    "# Overall average wait time (single number)\n",
    "indy_jones_overall_wt_av = overall_wt_av_ride(indy_jones_yr_hrly_wt_av)\n",
    "\n",
    "# Add to df\n",
    "overall_wt_data.append(indy_jones_overall_wt_av)\n",
    "\n",
    "\n",
    "# ride time\n",
    "ride_time.append(10)\n",
    "\n",
    "# Get coordinates\n",
    "indy_jones = gmaps.find_place('Indiana Jones Adventure', 'textquery', fields = ['formatted_address', 'geometry','place_id'])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "170618b2",
   "metadata": {},
   "source": [
    "### Pirates of the Caribbean "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "ffd2687c",
   "metadata": {},
   "outputs": [],
   "source": [
    "months = ['jan', 'feb', 'mar', 'apr', 'may', 'june', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']\n",
    "\n",
    "num_months = 12\n",
    "\n",
    "hourly_wt_av = []\n",
    "\n",
    "for month in months:\n",
    "    df = pd.read_csv(r'/Users/annaglowski/Desktop/Thesis/Pirates/Pirates_%s.csv' % month.title())\n",
    "    hourly_wt_av.append(hourly_average_wt(df))\n",
    "\n",
    "# Hourly average wait time\n",
    "pirates_yr_hrly_wt_av = hourly_av_wt_ride(hourly_wt_av, num_months)  \n",
    "\n",
    "# Add to df\n",
    "hrly_wt_data['Pirates of the Caribbean'] = pirates_yr_hrly_wt_av\n",
    "\n",
    "# Overall average wait time\n",
    "pirates_overall_wt_av = overall_wt_av_ride(pirates_yr_hrly_wt_av)\n",
    "\n",
    "# Add to df\n",
    "overall_wt_data.append(pirates_overall_wt_av)\n",
    "\n",
    "# ride time\n",
    "ride_time.append(10)\n",
    "\n",
    "# Get coordinates\n",
    "pirates = gmaps.find_place('Pirates of the Caribbean (Disneyland)', 'textquery', fields = ['formatted_address', 'geometry','place_id'])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c70cafb",
   "metadata": {},
   "source": [
    "### Splash Mountain"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "3613ecf3",
   "metadata": {},
   "outputs": [],
   "source": [
    "months = ['jan', 'feb', 'mar', 'apr', 'may', 'june', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']\n",
    "\n",
    "num_months = 12\n",
    "\n",
    "hourly_wt_av = []\n",
    "\n",
    "for month in months:\n",
    "    df = pd.read_csv(r'/Users/annaglowski/Desktop/Thesis/Splash_Mt/Splash_Mt_%s.csv' % month.title())\n",
    "    hourly_wt_av.append(hourly_average_wt(df))\n",
    "\n",
    "# Hourly average wait time\n",
    "splash_mt_yr_hrly_wt_av = hourly_av_wt_ride(hourly_wt_av, num_months)  \n",
    "\n",
    "# Add to df\n",
    "hrly_wt_data['Splash Mountain'] = splash_mt_yr_hrly_wt_av\n",
    "\n",
    "# Overall average wait time (single number)\n",
    "splash_mt_overall_wt_av = overall_wt_av_ride(splash_mt_yr_hrly_wt_av)\n",
    "\n",
    "# Add to df\n",
    "overall_wt_data.append(splash_mt_overall_wt_av)\n",
    "\n",
    "# ride time\n",
    "ride_time.append(11)\n",
    "\n",
    "# Get coordinates\n",
    "splash_mt = gmaps.find_place('Splash Mountain (Disneyland)', 'textquery', fields = ['formatted_address', 'geometry','place_id'])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b703cf1a",
   "metadata": {},
   "source": [
    "### Big Thunder Mountain Railroad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "668033d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "months = ['jan', 'feb', 'mar', 'apr', 'may', 'june', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']\n",
    "\n",
    "num_months = 12\n",
    "\n",
    "hourly_wt_av = []\n",
    "\n",
    "for month in months:\n",
    "    df = pd.read_csv(r'/Users/annaglowski/Desktop/Thesis/Big_Thunder/Big_Thunder_%s.csv' % month.title())\n",
    "    hourly_wt_av.append(hourly_average_wt(df))\n",
    "\n",
    "# Hourly average wait time\n",
    "big_thunder_yr_hrly_wt_av = hourly_av_wt_ride(hourly_wt_av, num_months)  \n",
    "\n",
    "# Add to tdf\n",
    "hrly_wt_data['Big Thunder Mountain Railroad'] = big_thunder_yr_hrly_wt_av\n",
    "\n",
    "# Overall average wait time (single number)\n",
    "big_thunder_overall_wt_av = overall_wt_av_ride(big_thunder_yr_hrly_wt_av)\n",
    "\n",
    "# Add to df\n",
    "overall_wt_data.append(big_thunder_overall_wt_av)\n",
    "\n",
    "# ride time\n",
    "ride_time.append(3.5)\n",
    "\n",
    "# Get Coordinates\n",
    "big_thunder = gmaps.find_place('Big Thunder Mountain Railroad (California)', 'textquery', fields = ['formatted_address', 'geometry','place_id'])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ef1ddcd",
   "metadata": {},
   "source": [
    "### Matterhorn Bobsleds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "bf7ff085",
   "metadata": {},
   "outputs": [],
   "source": [
    "months = ['jan', 'feb', 'mar', 'apr', 'may', 'june', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']\n",
    "\n",
    "num_months = 12\n",
    "\n",
    "hourly_wt_av = []\n",
    "\n",
    "for month in months:\n",
    "    df = pd.read_csv(r'/Users/annaglowski/Desktop/Thesis/Matterhorn/Matterhorn_%s.csv' % month.title())\n",
    "    hourly_wt_av.append(hourly_average_wt(df))\n",
    "\n",
    "# Hourly average wait time\n",
    "matterhorn_yr_hrly_wt_av = hourly_av_wt_ride(hourly_wt_av, num_months)  \n",
    "\n",
    "# add to df\n",
    "hrly_wt_data['Matterhorn Bobsleds'] = matterhorn_yr_hrly_wt_av\n",
    "\n",
    "# Overall average wait time (single number)\n",
    "matterhorn_overall_wt_av = overall_wt_av_ride(matterhorn_yr_hrly_wt_av)\n",
    "\n",
    "# Add to df\n",
    "overall_wt_data.append(matterhorn_overall_wt_av)\n",
    "\n",
    "# ride time\n",
    "ride_time.append(4)\n",
    "\n",
    "# Get coordinates\n",
    "matterhorn = gmaps.find_place('Matterhorn Bobsleds', 'textquery', fields = ['formatted_address', 'geometry','place_id'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "380a0134",
   "metadata": {},
   "source": [
    "### Location of Restaurant Options"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "4c0d1936",
   "metadata": {},
   "outputs": [],
   "source": [
    "plaza_inn = gmaps.find_place('Plaza Inn Disneyland', 'textquery', fields = ['formatted_address', 'geometry','place_id'])\n",
    "\n",
    "galactic_grill = gmaps.find_place('Galactic Grill Disneyland', 'textquery', fields = ['formatted_address', 'geometry','place_id'])\n",
    "\n",
    "daisy_dinner = gmaps.find_place(\"Daisy's Dinner Disneyland\", 'textquery', fields = ['formatted_address', 'geometry','place_id'])\n",
    "\n",
    "blue_bayou = gmaps.find_place('Blue Bayou Restaurant Disneyland', 'textquery', fields = ['formatted_address', 'geometry','place_id'])\n",
    "\n",
    "golden = gmaps.find_place('The Golden Horseshoe Disneyland', 'textquery', fields = ['formatted_address', 'geometry','place_id'])\n",
    "\n",
    "bengal_bbq = gmaps.find_place('Bengal Barbeque Disneyland', 'textquery', fields = ['formatted_address', 'geometry','place_id'])\n",
    "\n",
    "tavern = gmaps.find_place('Red Rose Tavern Disneyland', 'textquery', fields = ['formatted_address', 'geometry','place_id'])\n",
    "\n",
    "troubadour = gmaps.find_place('Troubadour Tavern Disneyland', 'textquery', fields = ['formatted_address', 'geometry','place_id'])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4bb15bff",
   "metadata": {},
   "source": [
    "-------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ca4078a",
   "metadata": {},
   "source": [
    "## Introduction Graph - Average Wait time by Hour"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "c253a70f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "hour = [0, 1, 2, 3,4 ,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]\n",
    "\n",
    "\n",
    "rides = ['Entrance', 'Its a Small World', 'Space Mountain', 'Star Wars: Rise of Resistance', 'Indiana Jones Adventure', \n",
    "         'Pirates of the Caribbean', 'Splash Mountain', 'Big Thunder Mountain Railway', 'Matterhorn Bobsleds']\n",
    "\n",
    "fig = plt.figure()\n",
    "ax = plt.subplot(111)\n",
    "\n",
    "ax.plot(hour, hrly_wt_data)\n",
    "\n",
    "# Shrink current axis by 20%\n",
    "box = ax.get_position()\n",
    "ax.set_position([box.x0, box.y0, box.width * 0.8, box.height])\n",
    "\n",
    "# Put a legend to the right of the current axis\n",
    "ax.legend(rides, loc='center left', bbox_to_anchor=(1, 0.5))\n",
    "\n",
    "plt.title('Average Wait Time by Hour')\n",
    "plt.xlabel('Hour of Day')\n",
    "plt.ylabel('Wait Time (min)')\n",
    "\n",
    "plt.savefig(\"wt_data.pdf\", format=\"pdf\", bbox_inches=\"tight\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c0797ab",
   "metadata": {},
   "source": [
    "-------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f07a7153",
   "metadata": {},
   "source": [
    "# Distance Matrix - Initial and Time Formulation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef684471",
   "metadata": {},
   "source": [
    "### Creating a Dataframe of all Rides with Lat and Long"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "2c50bedd",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "data = [['Entrance', entrance['candidates'][0]['geometry']['location']['lat'],entrance['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Its a Small World', small_world['candidates'][0]['geometry']['location']['lat'],small_world['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Space Mountain', space_mt['candidates'][0]['geometry']['location']['lat'], space_mt['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Star Wars: Rise of Resistance', star_wars['candidates'][0]['geometry']['location']['lat'], star_wars['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Indiana Jones Adventure', indy_jones['candidates'][0]['geometry']['location']['lat'], indy_jones['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Pirates of the Caribbean', pirates['candidates'][0]['geometry']['location']['lat'], pirates['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Splash Mountain', splash_mt['candidates'][0]['geometry']['location']['lat'], splash_mt['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Big Thunder Mountain Railway', big_thunder['candidates'][0]['geometry']['location']['lat'], big_thunder['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Matterhorn Bobsleds', matterhorn['candidates'][0]['geometry']['location']['lat'], matterhorn['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Exit', entrance['candidates'][0]['geometry']['location']['lat'],entrance['candidates'][0]['geometry']['location']['lng']]]\n",
    "\n",
    "\n",
    "df = pd.DataFrame(data, columns=['Ride', 'Latitude', 'Longitude'])\n",
    "\n",
    "df.to_csv('Lat_Long.csv')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5586428",
   "metadata": {},
   "source": [
    "### Calculating the Distance Matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "822dfbb3",
   "metadata": {},
   "outputs": [],
   "source": [
    "from itertools import tee\n",
    "\n",
    "#empty list - will be used to store calculated distances\n",
    "time_list = []\n",
    "distance_list = []\n",
    "origin_id_list = []\n",
    "destination_id_list = []\n",
    "\n",
    "# Loop through each row in the data frame using pairwise\n",
    "for (i1, row1) in df.iterrows():\n",
    "      #Assign latitude and longitude as origin/departure points\n",
    "    lat_origin = row1['Latitude'] \n",
    "    long_origin = row1['Longitude']\n",
    "    origin = (lat_origin,long_origin)\n",
    "    origin_id = row1['Ride'] \n",
    "    \n",
    "    for (i2, row2) in  df.iterrows():\n",
    "        #Assign latitude and longitude from the next row as the destination point\n",
    "        lat_dest = row2['Latitude']   # Save value as lat\n",
    "        long_dest = row2['Longitude'] # Save value as lat\n",
    "        destination = (lat_dest,long_dest)\n",
    "        destination_id = row2['Ride']\n",
    "        #pass origin and destination variables to distance_matrix function# output in meters\n",
    "        result = result = gmaps.distance_matrix(origin, destination, mode = 'walking')\n",
    "\n",
    "        result_distance = result[\"rows\"][0][\"elements\"][0][\"distance\"][\"text\"]\n",
    "        result_time = result[\"rows\"][0][\"elements\"][0][\"duration\"][\"text\"]\n",
    "          \n",
    "        time_list.append(result_time)\n",
    "        distance_list.append(result_distance)\n",
    "        origin_id_list.append(origin_id)\n",
    "        destination_id_list.append(destination_id)\n",
    "\n",
    "distance_matrix = pd.DataFrame()\n",
    "\n",
    "distance_matrix['Origin'] = origin_id_list\n",
    "distance_matrix['Destination'] = destination_id_list\n",
    "distance_matrix['Time'] = time_list\n",
    "distance_matrix['Distance'] = distance_list"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02455f2e",
   "metadata": {},
   "source": [
    "### Converting to distance and time integer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "14e34913",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Convert the walking time string to ints\n",
    "import re\n",
    "\n",
    "walk = [] #total wait time \n",
    "dist = []\n",
    "\n",
    "for i in range(0,100):\n",
    "    time = distance_matrix['Time'][i]\n",
    "    distance = distance_matrix['Distance'][i]\n",
    "    t = [float(s) for s in re.findall(r'-?\\d+\\.?\\d*', time)]\n",
    "    d = [float(b) for b in re.findall(r'-?\\d+\\.?\\d*', distance)]\n",
    "    walk.append(t[0])\n",
    "    dist.append(d[0])\n",
    "    \n",
    "\n",
    "distance_matrix['Walk Time'] = walk\n",
    "distance_matrix['Distance Walk'] = dist\n",
    "\n",
    "\n",
    "distance_matrix.to_csv('distance_matrix.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8a9f7c1",
   "metadata": {},
   "source": [
    "-------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b24f44f",
   "metadata": {},
   "source": [
    "# Distance Matrix - Dining Complication"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8206aac",
   "metadata": {},
   "source": [
    "### Creating a Dataframe of all Activities with Lat and Long"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "d0cdcefb",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_food = [['Entrance', entrance['candidates'][0]['geometry']['location']['lat'],entrance['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Its a Small World', small_world['candidates'][0]['geometry']['location']['lat'],small_world['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Space Mountain', space_mt['candidates'][0]['geometry']['location']['lat'], space_mt['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Star Wars: Rise of Resistance', star_wars['candidates'][0]['geometry']['location']['lat'], star_wars['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Indiana Jones Adventure', indy_jones['candidates'][0]['geometry']['location']['lat'], indy_jones['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Pirates of the Caribbean', pirates['candidates'][0]['geometry']['location']['lat'], pirates['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Splash Mountain', splash_mt['candidates'][0]['geometry']['location']['lat'], splash_mt['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Big Thunder Mountain Railway', big_thunder['candidates'][0]['geometry']['location']['lat'], big_thunder['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Matterhorn Bobsleds', matterhorn['candidates'][0]['geometry']['location']['lat'], matterhorn['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Exit', entrance['candidates'][0]['geometry']['location']['lat'],entrance['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Plaza Inn - L', plaza_inn['candidates'][0]['geometry']['location']['lat'],plaza_inn['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Galactic Grill - L', galactic_grill['candidates'][0]['geometry']['location']['lat'],galactic_grill['candidates'][0]['geometry']['location']['lng']],\n",
    "        [\"Daisy's Dinner - L\", daisy_dinner['candidates'][0]['geometry']['location']['lat'],daisy_dinner['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Blue Bayou Restaurant - L', blue_bayou['candidates'][0]['geometry']['location']['lat'],blue_bayou['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Bengal Barbeque - L', bengal_bbq['candidates'][0]['geometry']['location']['lat'],bengal_bbq['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['The Golden Horseshoe - L', golden['candidates'][0]['geometry']['location']['lat'],golden['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Red Rose Tavern - L', tavern['candidates'][0]['geometry']['location']['lat'], tavern['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Troubadour Tavern - L', troubadour['candidates'][0]['geometry']['location']['lat'],troubadour['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Plaza Inn - D', plaza_inn['candidates'][0]['geometry']['location']['lat'],plaza_inn['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Galactic Grill - D', galactic_grill['candidates'][0]['geometry']['location']['lat'],galactic_grill['candidates'][0]['geometry']['location']['lng']],\n",
    "        [\"Daisy's Dinner - D\", daisy_dinner['candidates'][0]['geometry']['location']['lat'],daisy_dinner['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Blue Bayou Restaurant - D', blue_bayou['candidates'][0]['geometry']['location']['lat'],blue_bayou['candidates'][0]['geometry']['location']['lng']],     \n",
    "        ['Bengal Barbeque - D', bengal_bbq['candidates'][0]['geometry']['location']['lat'],bengal_bbq['candidates'][0]['geometry']['location']['lng']],     \n",
    "        ['The Golden Horseshoe - D', golden['candidates'][0]['geometry']['location']['lat'],golden['candidates'][0]['geometry']['location']['lng']],     \n",
    "        ['Red Rose Tavern - D', tavern['candidates'][0]['geometry']['location']['lat'], tavern['candidates'][0]['geometry']['location']['lng']],     \n",
    "        ['Troubadour Tavern - D', troubadour['candidates'][0]['geometry']['location']['lat'],troubadour['candidates'][0]['geometry']['location']['lng']]] \n",
    "             \n",
    "             \n",
    "dffood = pd.DataFrame(data_food, columns=['Ride', 'Latitude', 'Longitude'])\n",
    "\n",
    "# Save for future use\n",
    "dffood.to_csv('Lat_Long_DFood.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21460926",
   "metadata": {},
   "source": [
    "### Calculating the Dining Complication Distance Matrix "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "d2dc4d58",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculations of Distance Matrix\n",
    "\n",
    "from itertools import tee\n",
    "\n",
    "#empty list - will be used to store calculated distances\n",
    "time_list = []\n",
    "distance_list = []\n",
    "origin_id_list = []\n",
    "destination_id_list = []\n",
    "\n",
    "# Loop through each row in the data frame using pairwise\n",
    "for (i1, row1) in dffood.iterrows():\n",
    "      #Assign latitude and longitude as origin/departure points\n",
    "    lat_origin = row1['Latitude'] \n",
    "    long_origin = row1['Longitude']\n",
    "    origin = (lat_origin,long_origin)\n",
    "    origin_id = row1['Ride'] \n",
    "    \n",
    "    for (i2, row2) in  dffood.iterrows():\n",
    "        #Assign latitude and longitude from the next row as the destination point\n",
    "        lat_dest = row2['Latitude']   # Save value as lat\n",
    "        long_dest = row2['Longitude'] # Save value as lat\n",
    "        destination = (lat_dest,long_dest)\n",
    "        destination_id = row2['Ride']\n",
    "        #pass origin and destination variables to distance_matrix function# output in meters\n",
    "        result = result = gmaps.distance_matrix(origin, destination, mode = 'walking')\n",
    "\n",
    "        result_distance = result[\"rows\"][0][\"elements\"][0][\"distance\"][\"text\"]\n",
    "        result_time = result[\"rows\"][0][\"elements\"][0][\"duration\"][\"text\"]\n",
    "          \n",
    "        time_list.append(result_time)\n",
    "        distance_list.append(result_distance)\n",
    "        origin_id_list.append(origin_id)\n",
    "        destination_id_list.append(destination_id)\n",
    "\n",
    "distance_matrix_Dfood = pd.DataFrame()\n",
    "\n",
    "distance_matrix_Dfood['Origin'] = origin_id_list\n",
    "distance_matrix_Dfood['Destination'] = destination_id_list\n",
    "distance_matrix_Dfood['Time'] = time_list\n",
    "distance_matrix_Dfood['Distance'] = distance_list"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18adf03e",
   "metadata": {},
   "source": [
    "### Converting to distance and time integer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "1a80214a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert the walking time string to ints\n",
    "import re\n",
    "\n",
    "walk = [] #total wait time \n",
    "dist = []\n",
    "\n",
    "for i in range(0,676):\n",
    "    time = distance_matrix_Dfood['Time'][i]\n",
    "    distance = distance_matrix_Dfood['Distance'][i]\n",
    "    t = [float(s) for s in re.findall(r'-?\\d+\\.?\\d*', time)]\n",
    "    d = [float(b) for b in re.findall(r'-?\\d+\\.?\\d*', distance)]\n",
    "    walk.append(t[0])\n",
    "    dist.append(d[0])\n",
    "    \n",
    "\n",
    "distance_matrix_Dfood['Walk Time'] = walk\n",
    "distance_matrix_Dfood['Distance Walk'] = dist\n",
    "\n",
    "\n",
    "distance_matrix_Dfood.to_csv('distance_matrix_Dfood.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61f81c96",
   "metadata": {},
   "source": [
    "-------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc78a2d3",
   "metadata": {},
   "source": [
    "## Distance Matrix - Prioritization and Downtime Complication"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7bcb02ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Location of the Fireworks\n",
    "parade = gmaps.find_place('Sleeping Beauty Castle Disneyland California', 'textquery', fields = ['formatted_address', 'geometry','place_id'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ce530f0",
   "metadata": {},
   "source": [
    "### Creating a Dataframe of all Activities with Lat and Long"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4adc8076",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create Dataframe with Exit and FOOD\n",
    "\n",
    "data_food = [['Entrance', entrance['candidates'][0]['geometry']['location']['lat'],entrance['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Its a Small World 1', small_world['candidates'][0]['geometry']['location']['lat'],small_world['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Its a Small World 2', small_world['candidates'][0]['geometry']['location']['lat'],small_world['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Space Mountain 1', space_mt['candidates'][0]['geometry']['location']['lat'], space_mt['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Space Mountain 2', space_mt['candidates'][0]['geometry']['location']['lat'], space_mt['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Star Wars: Rise of Resistance 1', star_wars['candidates'][0]['geometry']['location']['lat'], star_wars['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Star Wars: Rise of Resistance 2', star_wars['candidates'][0]['geometry']['location']['lat'], star_wars['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Indiana Jones Adventure 1', indy_jones['candidates'][0]['geometry']['location']['lat'], indy_jones['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Indiana Jones Adventure 2', indy_jones['candidates'][0]['geometry']['location']['lat'], indy_jones['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Pirates of the Caribbean 1', pirates['candidates'][0]['geometry']['location']['lat'], pirates['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Pirates of the Caribbean 2', pirates['candidates'][0]['geometry']['location']['lat'], pirates['candidates'][0]['geometry']['location']['lng']],   \n",
    "        ['Splash Mountain 1', splash_mt['candidates'][0]['geometry']['location']['lat'], splash_mt['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Splash Mountain 2', splash_mt['candidates'][0]['geometry']['location']['lat'], splash_mt['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Big Thunder Mountain Railway 1', big_thunder['candidates'][0]['geometry']['location']['lat'], big_thunder['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Big Thunder Mountain Railway 2', big_thunder['candidates'][0]['geometry']['location']['lat'], big_thunder['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Matterhorn Bobsleds 1', matterhorn['candidates'][0]['geometry']['location']['lat'], matterhorn['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Matterhorn Bobsleds 2', matterhorn['candidates'][0]['geometry']['location']['lat'], matterhorn['candidates'][0]['geometry']['location']['lng']],        \n",
    "        ['Exit', entrance['candidates'][0]['geometry']['location']['lat'],entrance['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Fireworks', parade['candidates'][0]['geometry']['location']['lat'],parade['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Plaza Inn - L', plaza_inn['candidates'][0]['geometry']['location']['lat'],plaza_inn['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Galactic Grill - L', galactic_grill['candidates'][0]['geometry']['location']['lat'],galactic_grill['candidates'][0]['geometry']['location']['lng']],\n",
    "        [\"Daisy's Dinner - L\", daisy_dinner['candidates'][0]['geometry']['location']['lat'],daisy_dinner['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Blue Bayou Restaurant - L', blue_bayou['candidates'][0]['geometry']['location']['lat'],blue_bayou['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Bengal Barbeque - L', bengal_bbq['candidates'][0]['geometry']['location']['lat'],bengal_bbq['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['The Golden Horseshoe - L', golden['candidates'][0]['geometry']['location']['lat'],golden['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Red Rose Tavern - L', tavern['candidates'][0]['geometry']['location']['lat'], tavern['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Troubadour Tavern - L', troubadour['candidates'][0]['geometry']['location']['lat'],troubadour['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Plaza Inn - D', plaza_inn['candidates'][0]['geometry']['location']['lat'],plaza_inn['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Galactic Grill - D', galactic_grill['candidates'][0]['geometry']['location']['lat'],galactic_grill['candidates'][0]['geometry']['location']['lng']],\n",
    "        [\"Daisy's Dinner - D\", daisy_dinner['candidates'][0]['geometry']['location']['lat'],daisy_dinner['candidates'][0]['geometry']['location']['lng']],\n",
    "        ['Blue Bayou Restaurant - D', blue_bayou['candidates'][0]['geometry']['location']['lat'],blue_bayou['candidates'][0]['geometry']['location']['lng']],     \n",
    "        ['Bengal Barbeque - D', bengal_bbq['candidates'][0]['geometry']['location']['lat'],bengal_bbq['candidates'][0]['geometry']['location']['lng']],     \n",
    "        ['The Golden Horseshoe - D', golden['candidates'][0]['geometry']['location']['lat'],golden['candidates'][0]['geometry']['location']['lng']],     \n",
    "        ['Red Rose Tavern - D', tavern['candidates'][0]['geometry']['location']['lat'], tavern['candidates'][0]['geometry']['location']['lng']],     \n",
    "        ['Troubadour Tavern - D', troubadour['candidates'][0]['geometry']['location']['lat'],troubadour['candidates'][0]['geometry']['location']['lng']]] \n",
    "             \n",
    "             \n",
    "dftrides = pd.DataFrame(data_food, columns=['Ride', 'Latitude', 'Longitude'])\n",
    "\n",
    "# Save for future use\n",
    "dftrides.to_csv('Lat_Long_TRides.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0404fc1",
   "metadata": {},
   "source": [
    "### Calculating the Prioritization and Downtime Complication Distance Matrix "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e2e01e16",
   "metadata": {},
   "outputs": [],
   "source": [
    "from itertools import tee\n",
    "\n",
    "#empty list - will be used to store calculated distances\n",
    "time_list = []\n",
    "distance_list = []\n",
    "origin_id_list = []\n",
    "destination_id_list = []\n",
    "\n",
    "# Loop through each row in the data frame using pairwise\n",
    "for (i1, row1) in dftrides.iterrows():\n",
    "      #Assign latitude and longitude as origin/departure points\n",
    "    lat_origin = row1['Latitude'] \n",
    "    long_origin = row1['Longitude']\n",
    "    origin = (lat_origin,long_origin)\n",
    "    origin_id = row1['Ride'] \n",
    "    \n",
    "    for (i2, row2) in  dftrides.iterrows():\n",
    "        #Assign latitude and longitude from the next row as the destination point\n",
    "        lat_dest = row2['Latitude']   # Save value as lat\n",
    "        long_dest = row2['Longitude'] # Save value as lat\n",
    "        destination = (lat_dest,long_dest)\n",
    "        destination_id = row2['Ride']\n",
    "        #pass origin and destination variables to distance_matrix function# output in meters\n",
    "        result = result = gmaps.distance_matrix(origin, destination, mode = 'walking')\n",
    "\n",
    "        result_distance = result[\"rows\"][0][\"elements\"][0][\"distance\"][\"text\"]\n",
    "        result_time = result[\"rows\"][0][\"elements\"][0][\"duration\"][\"text\"]\n",
    "          \n",
    "        time_list.append(result_time)\n",
    "        distance_list.append(result_distance)\n",
    "        origin_id_list.append(origin_id)\n",
    "        destination_id_list.append(destination_id)\n",
    "\n",
    "distance_matrix_trides = pd.DataFrame()\n",
    "\n",
    "distance_matrix_trides['Origin'] = origin_id_list\n",
    "distance_matrix_trides['Destination'] = destination_id_list\n",
    "distance_matrix_trides['Time'] = time_list\n",
    "distance_matrix_trides['Distance'] = distance_list\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7210c4d1",
   "metadata": {},
   "source": [
    "### Converting to distance and time integer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "539f08d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert the walking time string to ints\n",
    "import re\n",
    "\n",
    "walk = [] #total wait time \n",
    "dist = []\n",
    "\n",
    "for i in range(0,1225):\n",
    "    time = distance_matrix_trides['Time'][i]\n",
    "    distance = distance_matrix_trides['Distance'][i]\n",
    "    t = [float(s) for s in re.findall(r'-?\\d+\\.?\\d*', time)]\n",
    "    d = [float(b) for b in re.findall(r'-?\\d+\\.?\\d*', distance)]\n",
    "    walk.append(t[0])\n",
    "    dist.append(d[0])\n",
    "    \n",
    "\n",
    "distance_matrix_trides['Walk Time'] = walk\n",
    "distance_matrix_trides['Distance Walk'] = dist\n",
    "\n",
    "\n",
    "distance_matrix_trides.to_csv('distance_matrix_trides.csv')\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
