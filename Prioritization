{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "cd9542d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import csv\n",
    "import os\n",
    "import numpy as np\n",
    "import gurobipy as gp\n",
    "from gurobipy import LinExpr, GRB\n",
    "from itertools import permutations\n",
    "from itertools import combinations\n",
    "import googlemaps as gmaps\n",
    "from datetime import datetime\n",
    "\n",
    "\n",
    "gmaps = gmaps.Client(key= # Google Maps API key here)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3ce2e83",
   "metadata": {},
   "source": [
    "-------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "345635c4",
   "metadata": {},
   "source": [
    "### Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "8208d038",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "## Fomulate ride, wait and distance constants\n",
    "\n",
    "import re\n",
    "\n",
    "########################## Create Sets ###############################\n",
    "\n",
    "# All Rides\n",
    "capitals = ['Entrance', \n",
    "            'Its a Small World 1', 'Its a Small World 2', \n",
    "            'Space Mountain 1', 'Space Mountain 2', \n",
    "            'Star Wars: Rise of Resistance 1', 'Star Wars: Rise of Resistance 2', \n",
    "            'Indiana Jones Adventure 1', 'Indiana Jones Adventure 2', \n",
    "            'Pirates of the Caribbean 1', 'Pirates of the Caribbean 2', \n",
    "            'Splash Mountain 1', 'Splash Mountain 2', \n",
    "            'Big Thunder Mountain Railway 1', 'Big Thunder Mountain Railway 2', \n",
    "            'Matterhorn Bobsleds 1', 'Matterhorn Bobsleds 2', \n",
    "            'Fireworks',\n",
    "            'Exit']\n",
    "\n",
    "# Main Rides and Extra Attractions\n",
    "capitals_minus = ['Its a Small World 1', 'Its a Small World 2', \n",
    "            'Space Mountain 1', 'Space Mountain 2', \n",
    "            'Star Wars: Rise of Resistance 1', 'Star Wars: Rise of Resistance 2', \n",
    "            'Indiana Jones Adventure 1', 'Indiana Jones Adventure 2', \n",
    "            'Pirates of the Caribbean 1', 'Pirates of the Caribbean 2', \n",
    "            'Splash Mountain 1', 'Splash Mountain 2', \n",
    "            'Big Thunder Mountain Railway 1', 'Big Thunder Mountain Railway 2', \n",
    "            'Matterhorn Bobsleds 1', 'Matterhorn Bobsleds 2',\n",
    "            'Fireworks']\n",
    " \n",
    "# Main Rides\n",
    "first_ride = ['Its a Small World 1', 'Space Mountain 1', \n",
    "                  'Star Wars: Rise of Resistance 1', \n",
    "                  'Indiana Jones Adventure 1', 'Pirates of the Caribbean 1', \n",
    "                  'Splash Mountain 1', 'Big Thunder Mountain Railway 1', \n",
    "                  'Matterhorn Bobsleds 1']\n",
    "\n",
    "# Duplicate of Main Rides\n",
    "second_ride = ['Its a Small World 2', 'Space Mountain 2', \n",
    "                  'Star Wars: Rise of Resistance 2', \n",
    "                  'Indiana Jones Adventure 2', 'Pirates of the Caribbean 2', \n",
    "                  'Splash Mountain 2', 'Big Thunder Mountain Railway 2', \n",
    "                  'Matterhorn Bobsleds 2']\n",
    "\n",
    "# Activities\n",
    "capitals_food = ['Entrance', \n",
    "                 'Its a Small World 1', 'Its a Small World 2', \n",
    "            'Space Mountain 1', 'Space Mountain 2', \n",
    "            'Star Wars: Rise of Resistance 1', 'Star Wars: Rise of Resistance 2', \n",
    "            'Indiana Jones Adventure 1', 'Indiana Jones Adventure 2', \n",
    "            'Pirates of the Caribbean 1', 'Pirates of the Caribbean 2',\n",
    "            'Splash Mountain 1', 'Splash Mountain 2', \n",
    "            'Big Thunder Mountain Railway 1', 'Big Thunder Mountain Railway 2',\n",
    "            'Matterhorn Bobsleds 1', 'Matterhorn Bobsleds 2', \n",
    "                'Fireworks',\n",
    "                 'Exit',\n",
    "                 'Plaza Inn - L', \n",
    "                 'Galactic Grill - L', \n",
    "                 \"Daisy's Dinner - L\", \n",
    "                 'Blue Bayou Restaurant - L', \n",
    "                 'Bengal Barbeque - L',\n",
    "                 'The Golden Horseshoe - L', \n",
    "                 'Red Rose Tavern - L', \n",
    "                 'Troubadour Tavern - L',\n",
    "                 'Plaza Inn - D', \n",
    "                 'Galactic Grill - D', \n",
    "                 \"Daisy's Dinner - D\", \n",
    "                 'Blue Bayou Restaurant - D', \n",
    "                 'Bengal Barbeque - D',\n",
    "                 'The Golden Horseshoe - D', \n",
    "                 'Red Rose Tavern - D', \n",
    "                 'Troubadour Tavern - D']\n",
    "\n",
    "# Food Option Names \n",
    "food = ['Plaza Inn - L', \n",
    "        'Galactic Grill - L', \n",
    "        \"Daisy's Dinner - L\", \n",
    "        'Blue Bayou Restaurant - L', \n",
    "        'Bengal Barbeque - L',\n",
    "        'The Golden Horseshoe - L', \n",
    "        'Red Rose Tavern - L', \n",
    "        'Troubadour Tavern - L',\n",
    "        'Plaza Inn - D', \n",
    "        'Galactic Grill - D', \n",
    "        \"Daisy's Dinner - D\", \n",
    "        'Blue Bayou Restaurant - D', \n",
    "        'Bengal Barbeque - D',\n",
    "        'The Golden Horseshoe - D', \n",
    "        'Red Rose Tavern - D', \n",
    "        'Troubadour Tavern - D']\n",
    "\n",
    "########################## Parameters ###############################\n",
    "\n",
    "# Average wait time\n",
    "av_wt = [0,\n",
    " 14.176750419333157, 14.176750419333157, \n",
    " 49.2742706178715, 49.2742706178715, \n",
    " 100.52732538989471, 100.52732538989471,\n",
    " 42.74889237079236, 42.74889237079236, \n",
    " 23.366666395373894, 23.366666395373894,\n",
    " 30.709718187729766, 30.709718187729766,\n",
    " 33.67079740724337, 33.67079740724337, \n",
    " 37.825957101015725, 37.825957101015725,\n",
    "        10,\n",
    " 0, \n",
    " 0, \n",
    " 0, \n",
    " 0, \n",
    " 0, \n",
    " 0, \n",
    " 0, \n",
    " 0, \n",
    " 0, \n",
    " 0, \n",
    " 0, \n",
    " 0,\n",
    " 0,\n",
    " 0, \n",
    " 0, \n",
    " 0,\n",
    " 0]\n",
    "\n",
    "# Ride Time\n",
    "ride = [0, 14, 14, \n",
    "        5, 5, \n",
    "        18, 18,\n",
    "        10, 10,\n",
    "        10, 10,\n",
    "        11, 11,\n",
    "        3.5, 3.5,\n",
    "        4, 4, \n",
    "    20,\n",
    "        0, \n",
    "        45, 45, 45, 45, 45, 45, 45, 45, 65, 65, 65, 65, 65, 65, 65, 65]\n",
    "\n",
    "# Create Dictionaries for wait and ride time\n",
    "wait = {}\n",
    "ride_time = {}\n",
    "\n",
    "for i in range(0,35):\n",
    "    wait[capitals_food[i]] = av_wt[i]\n",
    "    ride_time[capitals_food[i]] = ride[i]\n",
    "\n",
    "# Prioritization\n",
    "# larger reward for better rides\n",
    "reward_val = [5, 5, 7, 7, 8, 8, 6, 6, 4, 4, 1, 1, 3, 3, 2, 2, 9, 9]\n",
    "\n",
    "reward = {}\n",
    "for i in range(0, 17):\n",
    "    reward[capitals_minus[i]]= reward_val[i]\n",
    "    \n",
    "    \n",
    "    \n",
    "# DISTANCE MATRIX\n",
    "\n",
    "distance_matrix = pd.read_csv('distance_matrix_trides.csv',index_col=0)\n",
    "\n",
    "# convert to dictionary\n",
    "dist = {(row['Origin'], row['Destination']): row['Walk Time'] for _, row in distance_matrix.iterrows()}\n",
    "\n",
    "# make matching origin and destinations larger\n",
    "for key,value in dist.items():\n",
    "    if key[0] == key[1]:\n",
    "        dist[key] = 100\n",
    "\n",
    "# Special Case for the double entrance value\n",
    "dist['Entrance', 'Exit'] = 100\n",
    "dist['Exit', 'Entrance'] = 100"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de971e8f",
   "metadata": {},
   "source": [
    "-------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1d961ec",
   "metadata": {},
   "source": [
    "## Problem Formulation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "c3ab0610",
   "metadata": {},
   "outputs": [],
   "source": [
    "import gurobipy as gp\n",
    "from gurobipy import LinExpr, GRB\n",
    "\n",
    "m = gp.Model()\n",
    "\n",
    "# [Parameter] large number double that of the ub on time\n",
    "M = 2000\n",
    "\n",
    "# [Parameter] 16 hours of park opening\n",
    "T = 960\n",
    "\n",
    "\n",
    "# [Variable] Arch connections: is ride 'i' adjacent to ride 'j' on the route?\n",
    "vars = m.addVars(dist.keys(), obj=dist, vtype=GRB.BINARY, name='x')\n",
    "\n",
    "# [Variable] Timestamp: What time does the guest arrive at each ride?\n",
    "t = m.addVars(capitals_food, lb = 0, ub = T)\n",
    "\n",
    "# [Variable] Check for visiting a lunch food stop\n",
    "food_stop = m.addVars(food, vtype=GRB.BINARY)\n",
    "\n",
    "# [Variable] Check for if visiting a ride\n",
    "ride_stop = m.addVars(capitals_minus, vtype=GRB.BINARY)\n",
    "\n",
    "\n",
    "\n",
    "# [Constraint] Input/Output constraints to create a route with no subtours where all rides visited once\n",
    "for i in capitals_food:\n",
    "    input = 0\n",
    "    output = 0\n",
    "    # sum across all combinations of pairings\n",
    "    for j in capitals_food:\n",
    "        if i != j:\n",
    "            input += vars[j, i]\n",
    "            output += vars[i,j]\n",
    "    if i == 'Entrance':\n",
    "        # Entrance should have not input and 1 output\n",
    "        m.addConstr(output == 1)\n",
    "    elif i == 'Exit':\n",
    "        # Exit should have 1 input and no outputs\n",
    "        m.addConstr(input ==1)\n",
    "    else: \n",
    "        m.addConstr(input == output)\n",
    "        # must ride each ride once\n",
    "        if i in first_ride:\n",
    "            m.addConstr(input == 1)\n",
    "            m.addConstr(input == ride_stop[i])\n",
    "        elif i not in food:\n",
    "            m.addConstr(input <= 1) \n",
    "            m.addConstr(input == ride_stop[i])\n",
    "        else: \n",
    "            m.addConstr(input == food_stop[i])\n",
    "\n",
    "# [Constraint] Must visit 2 food locations            \n",
    "m.addConstr(food_stop.sum() == 2)        \n",
    " \n",
    "# [Constraint] No Repeats\n",
    "j = 0\n",
    "for i in first_ride:\n",
    "        m.addConstr(vars[i, second_ride[j]] == 0)\n",
    "        m.addConstr(vars[second_ride[j],i] == 0)\n",
    "        j = j + 1\n",
    "        \n",
    "    \n",
    "# [Constraint] total timing: must be less than the total hours of the park\n",
    "m.addConstr(t['Exit']-t['Entrance']<= T)\n",
    "\n",
    "# [Constraint] Start time at 0\n",
    "m.addConstr(t['Entrance'] == 0)\n",
    "\n",
    "# [Constraint] Time must forward for rides and food\n",
    "for i in capitals_food:\n",
    "    for j in capitals_food:\n",
    "        if i != j:\n",
    "            m.addConstr(t[j] >= t[i] - M*(1-vars[i, j]) + dist[i, j] + wait[i] + ride_time[i])\n",
    "            \n",
    "            \n",
    "        \n",
    "# [Constraint] Must Visit lunch between 11 and 2  \n",
    "total1 = 0\n",
    "for i in range(0, 8):\n",
    "    f = food[i]\n",
    "    total1 = total1 + food_stop[f]\n",
    "    m.addConstr(360 >= t[f])\n",
    "    m.addConstr(180 <= t[f])\n",
    "\n",
    "# [Constraint] Must have one lunch stop and one dinner stop\n",
    "m.addConstr(total1 == 1)\n",
    "    \n",
    "# [Constraint] Must Visit dinner between 5 and 8  \n",
    "for i in range(8, 16):\n",
    "    f = food[i]\n",
    "    m.addConstr(720 >= t[f])\n",
    "    m.addConstr(540 <= t[f])\n",
    "    \n",
    "\n",
    "# [Constraint] Cannot visit the same food place twice (unique lunch and dinner)\n",
    "for i in range(0,8):\n",
    "    f = food[i]\n",
    "    g = food[i+8]\n",
    "    m.addConstr(food_stop[f]+food_stop[g]<=1)\n",
    "    \n",
    "# # [Constraint] Visit parade between 2pm and 4 pm\n",
    "# m.addConstr(t['Parade']>= 360)\n",
    "# m.addConstr(t['Parade']<= 480)\n",
    "\n",
    "# [Constraint] Visit Fireworks between 8:40and 9\n",
    "m.addConstr(t['Fireworks'] >= 780) # 9:00 pm\n",
    "m.addConstr(t['Fireworks'] <= 840) # 10:00 pm\n",
    "    \n",
    "    \n",
    "    \n",
    "# [Objective] Set objective to minimize the time guest arrives at Exit and to minimize the walking distance\n",
    "m.ModelSense = GRB.MINIMIZE\n",
    "m.setObjective(-gp.quicksum(ride_stop[i]*reward[i] for i in capitals_minus), 0)\n",
    "m.setObjectiveN(gp.quicksum(vars[i, j]*dist[i,j] for i, j in vars.keys()), 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "4ce24173",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gurobi Optimizer version 9.5.2 build v9.5.2rc0 (mac64[rosetta2])\n",
      "Thread count: 8 physical cores, 8 logical processors, using up to 8 threads\n",
      "Optimize a model with 1337 rows, 1293 columns and 7708 nonzeros\n",
      "Model fingerprint: 0xfac29dea\n",
      "Variable types: 35 continuous, 1258 integer (1258 binary)\n",
      "Coefficient statistics:\n",
      "  Matrix range     [1e+00, 2e+03]\n",
      "  Objective range  [1e+00, 1e+02]\n",
      "  Bounds range     [1e+00, 1e+03]\n",
      "  RHS range        [1e+00, 2e+03]\n",
      "\n",
      "---------------------------------------------------------------------------\n",
      "Multi-objectives: starting optimization with 2 objectives (1 combined) ...\n",
      "---------------------------------------------------------------------------\n",
      "---------------------------------------------------------------------------\n",
      "\n",
      "Multi-objectives: optimize objective 1 (weighted) ...\n",
      "---------------------------------------------------------------------------\n",
      "\n",
      "Optimize a model with 1337 rows, 1293 columns and 7708 nonzeros\n",
      "Model fingerprint: 0x155b9bfb\n",
      "Variable types: 35 continuous, 1258 integer (1258 binary)\n",
      "Coefficient statistics:\n",
      "  Matrix range     [1e+00, 2e+03]\n",
      "  Objective range  [1e+00, 1e+02]\n",
      "  Bounds range     [1e+00, 1e+03]\n",
      "  RHS range        [1e+00, 2e+03]\n",
      "Presolve removed 400 rows and 294 columns\n",
      "Presolve time: 0.05s\n",
      "Presolved: 937 rows, 999 columns, 4489 nonzeros\n",
      "Variable types: 34 continuous, 965 integer (965 binary)\n",
      "\n",
      "Root relaxation: objective -3.900000e+01, 123 iterations, 0.00 seconds (0.00 work units)\n",
      "\n",
      "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
      " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
      "\n",
      "     0     0  -39.00000    0   16          -  -39.00000      -     -    0s\n",
      "     0     0  -38.68513    0   46          -  -38.68513      -     -    0s\n",
      "     0     0  -38.68513    0   46          -  -38.68513      -     -    0s\n",
      "     0     0  -38.68513    0   32          -  -38.68513      -     -    0s\n",
      "     0     0  -38.68513    0   44          -  -38.68513      -     -    0s\n",
      "     0     0  -38.52190    0   45          -  -38.52190      -     -    0s\n",
      "     0     0  -38.52190    0   46          -  -38.52190      -     -    0s\n",
      "     0     0  -38.50000    0   33          -  -38.50000      -     -    0s\n",
      "     0     0  -38.50000    0   51          -  -38.50000      -     -    0s\n",
      "     0     0  -38.50000    0   38          -  -38.50000      -     -    0s\n",
      "     0     0  -38.21159    0   46          -  -38.21159      -     -    0s\n",
      "     0     0  -38.05556    0   50          -  -38.05556      -     -    0s\n",
      "     0     0  -38.05556    0   50          -  -38.05556      -     -    0s\n",
      "     0     0  -38.05556    0   25          -  -38.05556      -     -    0s\n",
      "     0     0  -38.05556    0   47          -  -38.05556      -     -    0s\n",
      "     0     0  -38.05556    0   50          -  -38.05556      -     -    0s\n",
      "     0     0  -38.05556    0   51          -  -38.05556      -     -    0s\n",
      "     0     0  -38.05556    0   29          -  -38.05556      -     -    0s\n",
      "H    0     0                       5.0000000  -38.05556   861%     -    0s\n",
      "     0     0  -38.05556    0   29    5.00000  -38.05556   861%     -    0s\n",
      "H    0     0                      -2.0000000  -37.55556  1778%     -    0s\n",
      "H    0     0                      -5.0000000  -37.55556   651%     -    0s\n",
      "H    0     2                     -10.0000000  -37.55556   276%     -    0s\n",
      "     0     2  -37.55556    0   25  -10.00000  -37.55556   276%     -    0s\n",
      "H   31    40                     -13.0000000  -36.00000   177%  51.3    0s\n",
      "H   33    40                     -14.0000000  -36.00000   157%  49.1    0s\n",
      "H   36    40                     -16.0000000  -36.00000   125%  48.4    0s\n",
      "H  789   758                     -17.0000000  -36.00000   112%   9.7    0s\n",
      "H  799   748                     -18.0000000  -36.00000   100%   9.8    0s\n",
      "H  800   731                     -20.0000000  -36.00000  80.0%   9.8    0s\n",
      "H 1475  1207                     -21.0000000  -36.00000  71.4%   8.6    1s\n",
      "H 1509  1175                     -22.0000000  -36.00000  63.6%   8.9    1s\n",
      "H 1517  1123                     -23.0000000  -36.00000  56.5%   8.9    1s\n",
      "H 2586  1541                     -25.0000000  -36.00000  44.0%   9.3    1s\n",
      "H 2588  1427                     -27.0000000  -36.00000  33.3%   9.3    1s\n",
      "H16179  8323                     -28.0000000  -35.18610  25.7%   9.1    3s\n",
      " 30008 16390  -33.50000   35   29  -28.00000  -35.00000  25.0%   9.1    6s\n",
      " 31474 16929  -33.76560   43   26  -28.00000  -35.00000  25.0%   9.3   10s\n",
      "H40806 18712                     -29.0000000  -35.00000  20.7%   9.5   12s\n",
      " 45567 20018  -33.95009   67   28  -29.00000  -34.50000  19.0%   9.8   15s\n",
      " 75828 28861  -32.88063   52   29  -29.00000  -34.33963  18.4%  10.5   20s\n",
      " 130190 49833  -32.81856   69   21  -29.00000  -34.00000  17.2%  10.3   25s\n",
      " 188285 83396  -34.00000   53   13  -29.00000  -34.00000  17.2%   9.9   30s\n",
      " 251898 121037  -33.44581   56   20  -29.00000  -34.00000  17.2%   9.6   35s\n",
      " 315876 158579     cutoff   88       -29.00000  -34.00000  17.2%   9.4   40s\n",
      " 376589 192535  -33.44647   98   23  -29.00000  -33.90458  16.9%   9.3   45s\n",
      " 438913 226071  -30.00000   49    4  -29.00000  -33.83189  16.7%   9.3   50s\n",
      " 497127 253761  -33.30754   85   24  -29.00000  -33.75640  16.4%   9.3   55s\n",
      " 549032 277398     cutoff   70       -29.00000  -33.68930  16.2%   9.4   60s\n",
      " 608849 305823 infeasible  105       -29.00000  -33.64042  16.0%   9.4   65s\n",
      " 665464 329964     cutoff   68       -29.00000  -33.57561  15.8%   9.4   70s\n",
      " 714992 348730  -32.72375   60   19  -29.00000  -33.50749  15.5%   9.4   75s\n",
      " 760383 365262  -30.50239   77   23  -29.00000  -33.50000  15.5%   9.6   80s\n",
      " 806573 379904  -33.44060   65   33  -29.00000  -33.44727  15.3%   9.7   85s\n",
      " 849803 390223     cutoff   79       -29.00000  -33.37144  15.1%   9.8   90s\n",
      " 896808 402774  -30.00000  100    8  -29.00000  -33.30117  14.8%   9.9   95s\n",
      " 944970 411154     cutoff   68       -29.00000  -33.20271  14.5%  10.0  100s\n",
      " 988541 417669     cutoff   64       -29.00000  -33.09610  14.1%  10.1  105s\n",
      " 1034849 422638  -31.77072   69   10  -29.00000  -33.00000  13.8%  10.2  110s\n",
      " 1083316 423908     cutoff   66       -29.00000  -33.00000  13.8%  10.3  115s\n",
      " 1134195 436361  -31.88519   49   33  -29.00000  -33.00000  13.8%  10.3  120s\n",
      " 1181771 452926  -32.39628   62   18  -29.00000  -33.00000  13.8%  10.3  125s\n",
      " 1236973 473698  -30.00000   74    4  -29.00000  -33.00000  13.8%  10.3  130s\n",
      " 1288829 492843  -31.57378   94    4  -29.00000  -33.00000  13.8%  10.3  135s\n",
      " 1338721 511935 infeasible   59       -29.00000  -33.00000  13.8%  10.2  140s\n",
      " 1380519 527965     cutoff   68       -29.00000  -33.00000  13.8%  10.2  145s\n",
      " 1430268 547899  -32.68803   55   26  -29.00000  -33.00000  13.8%  10.2  150s\n",
      " 1470653 562878  -32.33127   65   10  -29.00000  -33.00000  13.8%  10.2  155s\n",
      " 1518983 581384  -32.35843   66   19  -29.00000  -33.00000  13.8%  10.2  160s\n",
      " 1562467 597532  -31.00000   78    4  -29.00000  -33.00000  13.8%  10.2  165s\n",
      " 1604744 613288     cutoff   69       -29.00000  -33.00000  13.8%  10.2  170s\n",
      " 1651823 630986  -32.30666   56   16  -29.00000  -33.00000  13.8%  10.2  175s\n",
      " 1698014 647163  -32.75000   63   20  -29.00000  -33.00000  13.8%  10.2  180s\n",
      " 1742943 664068 infeasible   57       -29.00000  -33.00000  13.8%  10.2  185s\n",
      " 1790549 681669 infeasible   65       -29.00000  -33.00000  13.8%  10.2  190s\n",
      " 1826795 694967  -32.19209  109   10  -29.00000  -33.00000  13.8%  10.3  195s\n",
      " 1872048 711726  -32.47990   69   10  -29.00000  -33.00000  13.8%  10.3  200s\n",
      " 1915684 727176  -32.35313   54   10  -29.00000  -33.00000  13.8%  10.3  205s\n",
      " 1957149 741402  -31.00000   59   14  -29.00000  -33.00000  13.8%  10.3  210s\n",
      " 1994276 754290  -30.00000   71    6  -29.00000  -33.00000  13.8%  10.3  215s\n",
      " 2035388 768919  -32.57212   63    8  -29.00000  -33.00000  13.8%  10.3  220s\n",
      " 2082854 785693  -33.00000   60    6  -29.00000  -33.00000  13.8%  10.3  225s\n",
      " 2131883 802937     cutoff   63       -29.00000  -33.00000  13.8%  10.3  230s\n",
      " 2177379 819684  -32.37129   70   14  -29.00000  -33.00000  13.8%  10.4  235s\n",
      " 2216335 833865  -32.81591   55   15  -29.00000  -33.00000  13.8%  10.4  240s\n",
      " 2261052 849608 infeasible   74       -29.00000  -33.00000  13.8%  10.4  245s\n",
      " 2307173 866583 infeasible   80       -29.00000  -33.00000  13.8%  10.4  250s\n",
      " 2356306 885289 infeasible   64       -29.00000  -33.00000  13.8%  10.4  255s\n",
      " 2398051 900273  -32.68657   54   25  -29.00000  -33.00000  13.8%  10.4  260s\n",
      " 2444752 916947 infeasible   73       -29.00000  -33.00000  13.8%  10.4  265s\n",
      " 2491294 934328  -32.13882   65   12  -29.00000  -33.00000  13.8%  10.4  270s\n",
      " 2543972 954727 infeasible   65       -29.00000  -33.00000  13.8%  10.4  275s\n",
      " 2592627 973919  -32.54668   65   12  -29.00000  -33.00000  13.8%  10.4  280s\n",
      " 2635160 984971     cutoff   76       -29.00000  -32.97522  13.7%  10.4  285s\n",
      " 2678731 993576  -32.59893   65   18  -29.00000  -32.93801  13.6%  10.5  290s\n",
      " 2714249 1001560  -32.31929   70   13  -29.00000  -32.91496  13.5%  10.5  295s\n",
      " 2755684 1011516 infeasible   73       -29.00000  -32.89392  13.4%  10.5  300s\n",
      " 2799491 1021867  -30.45384   70   23  -29.00000  -32.87503  13.4%  10.5  305s\n",
      " 2844372 1031516  -32.83665   69    6  -29.00000  -32.85765  13.3%  10.5  310s\n",
      " 2889801 1040656     cutoff   81       -29.00000  -32.84180  13.2%  10.5  315s\n",
      " 2929828 1047877     cutoff   80       -29.00000  -32.82950  13.2%  10.6  320s\n",
      " 2974517 1055773     cutoff   66       -29.00000  -32.81228  13.1%  10.6  325s\n",
      " 3014560 1062379 infeasible   63       -29.00000  -32.79762  13.1%  10.6  330s\n",
      " 3060051 1069583 infeasible   60       -29.00000  -32.78315  13.0%  10.6  335s\n",
      " 3102471 1075924  -32.58479   62   22  -29.00000  -32.77116  13.0%  10.6  340s\n",
      " 3145587 1081614 infeasible   64       -29.00000  -32.75532  12.9%  10.6  345s\n",
      " 3182524 1087162  -32.00000   60    6  -29.00000  -32.74304  12.9%  10.7  350s\n",
      " 3224531 1092452 infeasible   79       -29.00000  -32.72629  12.8%  10.7  355s\n",
      " 3267763 1097268  -32.46480   62   13  -29.00000  -32.70863  12.8%  10.7  360s\n",
      " 3308699 1101445  -31.83470   59    8  -29.00000  -32.69455  12.7%  10.7  365s\n",
      " 3355440 1108221     cutoff   76       -29.00000  -32.68180  12.7%  10.7  370s\n",
      " 3401933 1112781     cutoff   62       -29.00000  -32.66882  12.7%  10.7  375s\n",
      " 3440731 1117934  -31.00000   73    6  -29.00000  -32.65897  12.6%  10.8  380s\n",
      " 3488329 1122475  -32.52608   64   10  -29.00000  -32.64615  12.6%  10.8  385s\n",
      " 3534585 1125453  -31.00000   70   11  -29.00000  -32.62918  12.5%  10.8  390s\n",
      " 3576315 1127408 infeasible   69       -29.00000  -32.61148  12.5%  10.8  395s\n",
      " 3619351 1131095  -31.65307   57   23  -29.00000  -32.59986  12.4%  10.8  400s\n",
      " 3664066 1134194  -32.24677   84    8  -29.00000  -32.58581  12.4%  10.8  405s\n",
      " 3707298 1135952 infeasible   73       -29.00000  -32.57087  12.3%  10.9  410s\n",
      " 3752711 1137404  -30.17131   77   35  -29.00000  -32.55540  12.3%  10.9  415s\n",
      " 3796168 1139098  -30.00000   62   17  -29.00000  -32.54232  12.2%  10.9  420s\n",
      " 3844126 1139372  -31.54316   67   10  -29.00000  -32.52414  12.2%  10.9  425s\n",
      " 3890443 1138754  -31.45157   61    6  -29.00000  -32.50691  12.1%  10.9  430s\n",
      " 3926426 1138498  -30.78401   64   29  -29.00000  -32.50691  12.1%  11.0  435s\n",
      " 3964701 1138280 infeasible   77       -29.00000  -32.50691  12.1%  11.0  440s\n",
      " 4000847 1137701 infeasible   72       -29.00000  -32.50691  12.1%  11.1  445s\n",
      " 4035943 1136124 infeasible   63       -29.00000  -32.50000  12.1%  11.1  450s\n",
      " 4074251 1143357  -31.92308   65   42  -29.00000  -32.50000  12.1%  11.1  455s\n",
      " 4118187 1149919  -31.49798   63   11  -29.00000  -32.49549  12.1%  11.1  460s\n",
      " 4164932 1148544 infeasible   63       -29.00000  -32.47735  12.0%  11.2  465s\n",
      " 4212636 1145946     cutoff   68       -29.00000  -32.45550  11.9%  11.2  470s\n",
      " 4258177 1143595  -30.00000   63    8  -29.00000  -32.43537  11.8%  11.2  475s\n",
      " 4302519 1141326     cutoff   68       -29.00000  -32.41530  11.8%  11.2  480s\n",
      " 4348392 1138443 infeasible   65       -29.00000  -32.39588  11.7%  11.2  485s\n",
      " 4395770 1134140  -31.59950   69   11  -29.00000  -32.37398  11.6%  11.2  490s\n",
      " 4439046 1129399  -31.64156   67    8  -29.00000  -32.35542  11.6%  11.2  495s\n",
      " 4485387 1123371  -31.61864   77   17  -29.00000  -32.33374  11.5%  11.3  500s\n",
      " 4527187 1121840  -31.64421   77   17  -29.00000  -32.31987  11.4%  11.3  505s\n",
      " 4575566 1114511  -31.65498   56    6  -29.00000  -32.29529  11.4%  11.3  510s\n",
      " 4617837 1107473  -31.26767   68   15  -29.00000  -32.27143  11.3%  11.3  515s\n",
      " 4665931 1100078     cutoff   72       -29.00000  -32.24548  11.2%  11.3  520s\n",
      " 4713929 1090176 infeasible   63       -29.00000  -32.21418  11.1%  11.4  525s\n",
      " 4760469 1081215     cutoff   74       -29.00000  -32.18653  11.0%  11.4  530s\n",
      " 4806967 1070387  -30.53782   63   19  -29.00000  -32.15489  10.9%  11.4  535s\n",
      " 4856088 1058445     cutoff   67       -29.00000  -32.11916  10.8%  11.4  540s\n",
      " 4905480 1046643 infeasible   61       -29.00000  -32.08558  10.6%  11.4  545s\n",
      " 4954968 1033621 infeasible   67       -29.00000  -32.04777  10.5%  11.4  550s\n",
      " 5002456 1019409  -30.68118   70   26  -29.00000  -32.01324  10.4%  11.5  555s\n",
      " 5043737 1007642  -31.59813   64    6  -29.00000  -32.00000  10.3%  11.5  560s\n",
      " 5089347 990314  -30.65879   59   16  -29.00000  -32.00000  10.3%  11.5  565s\n",
      " 5134887 984327  -30.94773   57   11  -29.00000  -32.00000  10.3%  11.5  570s\n",
      " 5184275 984055  -30.66250   65   14  -29.00000  -32.00000  10.3%  11.5  575s\n",
      " 5233058 983874  -31.61583   67   16  -29.00000  -32.00000  10.3%  11.5  580s\n",
      " 5279224 984603  -32.00000   61    8  -29.00000  -32.00000  10.3%  11.5  585s\n",
      " 5324589 987368     cutoff   60       -29.00000  -32.00000  10.3%  11.5  590s\n",
      " 5362813 989933  -30.95469   56   19  -29.00000  -32.00000  10.3%  11.5  595s\n",
      " 5403693 992735  -32.00000   55    8  -29.00000  -32.00000  10.3%  11.5  600s\n",
      " 5453346 996403     cutoff   61       -29.00000  -32.00000  10.3%  11.5  605s\n",
      " 5500515 1000390  -30.84810   72   17  -29.00000  -32.00000  10.3%  11.5  610s\n",
      " 5552116 1003852  -32.00000   72    4  -29.00000  -32.00000  10.3%  11.5  615s\n",
      " 5603313 1007500     cutoff   73       -29.00000  -32.00000  10.3%  11.5  620s\n",
      " 5648152 1012164 infeasible   63       -29.00000  -32.00000  10.3%  11.5  625s\n",
      " 5697577 1016375     cutoff   72       -29.00000  -32.00000  10.3%  11.5  630s\n",
      " 5746551 1020939     cutoff   60       -29.00000  -32.00000  10.3%  11.5  635s\n",
      " 5793603 1025148  -31.83469   61    8  -29.00000  -32.00000  10.3%  11.5  640s\n",
      " 5843911 1029219  -32.00000   76    6  -29.00000  -32.00000  10.3%  11.5  645s\n",
      " 5889269 1032964  -31.25549   54    6  -29.00000  -32.00000  10.3%  11.5  650s\n",
      " 5935546 1038108     cutoff   72       -29.00000  -32.00000  10.3%  11.5  655s\n",
      " 5980594 1043681  -30.95604   65   15  -29.00000  -32.00000  10.3%  11.5  660s\n",
      " 6023949 1046967  -31.25100   70   21  -29.00000  -32.00000  10.3%  11.5  665s\n",
      " 6072838 1051910  -31.55664   64   23  -29.00000  -32.00000  10.3%  11.5  670s\n",
      " 6120883 1057615     cutoff   72       -29.00000  -32.00000  10.3%  11.5  675s\n",
      " 6169227 1063231  -30.91634   62   16  -29.00000  -32.00000  10.3%  11.5  680s\n",
      " 6212862 1068038  -31.00000   61    7  -29.00000  -32.00000  10.3%  11.5  685s\n",
      " 6260409 1072934     cutoff   58       -29.00000  -32.00000  10.3%  11.5  690s\n",
      " 6308713 1078180     cutoff   86       -29.00000  -32.00000  10.3%  11.5  695s\n",
      " 6355230 1083511  -31.66391   67   11  -29.00000  -32.00000  10.3%  11.5  700s\n",
      " 6402917 1089381  -30.50606   57    9  -29.00000  -32.00000  10.3%  11.5  705s\n",
      " 6446574 1094604  -31.27432   68   25  -29.00000  -32.00000  10.3%  11.5  710s\n",
      " 6491215 1100108  -31.92694   55   16  -29.00000  -32.00000  10.3%  11.5  715s\n",
      " 6538413 1106282  -31.00000   66   12  -29.00000  -32.00000  10.3%  11.5  720s\n",
      " 6585835 1111972 infeasible   75       -29.00000  -32.00000  10.3%  11.5  725s\n",
      " 6625443 1117353  -31.90986   66   13  -29.00000  -32.00000  10.3%  11.5  730s\n",
      " 6671282 1123148  -31.20400   68   15  -29.00000  -32.00000  10.3%  11.5  735s\n",
      " 6717703 1128593  -30.00000   58    6  -29.00000  -32.00000  10.3%  11.5  740s\n",
      " 6763933 1133697  -31.01224   60    9  -29.00000  -32.00000  10.3%  11.5  745s\n",
      " 6809781 1139478  -31.57319   61   25  -29.00000  -32.00000  10.3%  11.5  750s\n",
      " 6851657 1144851  -31.89834   66   15  -29.00000  -32.00000  10.3%  11.5  755s\n",
      " 6897167 1150158     cutoff   66       -29.00000  -32.00000  10.3%  11.5  760s\n",
      " 6939702 1155125  -30.84383   75    7  -29.00000  -32.00000  10.3%  11.5  765s\n",
      " 6979236 1160436  -31.66543   77   19  -29.00000  -32.00000  10.3%  11.5  770s\n",
      " 7024308 1166303  -30.60638   66   17  -29.00000  -32.00000  10.3%  11.5  775s\n",
      " 7069919 1172020  -30.00000   64   13  -29.00000  -32.00000  10.3%  11.5  780s\n",
      " 7115821 1177741     cutoff   68       -29.00000  -32.00000  10.3%  11.5  785s\n",
      " 7159510 1182537  -30.98337   68   16  -29.00000  -32.00000  10.3%  11.5  790s\n",
      " 7207052 1188167     cutoff   72       -29.00000  -32.00000  10.3%  11.5  795s\n",
      " 7253337 1193872  -31.56064   64   24  -29.00000  -32.00000  10.3%  11.5  800s\n",
      " 7300495 1199630  -32.00000   71   27  -29.00000  -32.00000  10.3%  11.5  805s\n",
      " 7347712 1206069  -31.58001   82   12  -29.00000  -32.00000  10.3%  11.5  810s\n",
      " 7393247 1211485  -30.37122   67   14  -29.00000  -32.00000  10.3%  11.5  815s\n",
      " 7439386 1217254     cutoff   76       -29.00000  -32.00000  10.3%  11.5  820s\n",
      " 7484740 1222197     cutoff   73       -29.00000  -32.00000  10.3%  11.5  825s\n",
      " 7529360 1227275  -31.00000   66    8  -29.00000  -32.00000  10.3%  11.5  830s\n",
      " 7575774 1232420     cutoff   67       -29.00000  -32.00000  10.3%  11.5  835s\n",
      " 7621975 1238033 infeasible   55       -29.00000  -32.00000  10.3%  11.5  840s\n",
      " 7668898 1243383     cutoff   56       -29.00000  -32.00000  10.3%  11.5  845s\n",
      " 7717773 1249538 infeasible   70       -29.00000  -32.00000  10.3%  11.5  850s\n",
      " 7764218 1254520  -31.58686   70    8  -29.00000  -32.00000  10.3%  11.5  855s\n",
      " 7809753 1259249  -31.00000   59    4  -29.00000  -32.00000  10.3%  11.5  860s\n",
      " 7850816 1263817  -32.00000   69   21  -29.00000  -32.00000  10.3%  11.5  865s\n",
      " 7897453 1269128  -31.07739   73   26  -29.00000  -32.00000  10.3%  11.6  870s\n",
      " 7939759 1275066  -31.85550   70   15  -29.00000  -32.00000  10.3%  11.6  875s\n",
      " 7984704 1281397  -32.00000   60    6  -29.00000  -32.00000  10.3%  11.6  880s\n",
      " 8028905 1286560 infeasible   71       -29.00000  -32.00000  10.3%  11.6  885s\n",
      " 8073566 1292740 infeasible   64       -29.00000  -32.00000  10.3%  11.6  890s\n",
      " 8117094 1298193  -31.81106   55   18  -29.00000  -32.00000  10.3%  11.6  895s\n",
      " 8160178 1303522  -31.68384   65   15  -29.00000  -32.00000  10.3%  11.6  900s\n",
      " 8204703 1308020 infeasible   70       -29.00000  -32.00000  10.3%  11.6  905s\n",
      " 8249863 1312619  -31.55362   74   20  -29.00000  -32.00000  10.3%  11.6  910s\n",
      " 8296414 1317558  -31.88134   90   35  -29.00000  -32.00000  10.3%  11.6  915s\n",
      " 8340488 1322788  -31.79427   63    6  -29.00000  -32.00000  10.3%  11.6  920s\n",
      " 8380455 1327347  -30.00000   63   21  -29.00000  -32.00000  10.3%  11.6  925s\n",
      " 8424354 1331772  -30.68168   69   13  -29.00000  -32.00000  10.3%  11.6  930s\n",
      " 8467754 1336148  -30.91610   77   34  -29.00000  -32.00000  10.3%  11.6  935s\n",
      " 8513743 1341935     cutoff   69       -29.00000  -32.00000  10.3%  11.6  940s\n",
      " 8559038 1347137  -31.00000   63    8  -29.00000  -32.00000  10.3%  11.6  945s\n",
      " 8602623 1352584  -32.00000   65    6  -29.00000  -32.00000  10.3%  11.6  950s\n",
      " 8644426 1357524  -30.88622   80   12  -29.00000  -32.00000  10.3%  11.6  955s\n",
      " 8690274 1362805     cutoff   80       -29.00000  -32.00000  10.3%  11.6  960s\n",
      " 8736475 1368037  -30.48164   77   15  -29.00000  -32.00000  10.3%  11.6  965s\n",
      " 8783871 1373421  -30.79327   67   12  -29.00000  -32.00000  10.3%  11.6  970s\n",
      " 8828488 1378711 infeasible   84       -29.00000  -32.00000  10.3%  11.6  975s\n",
      " 8869783 1384679  -31.59629   68   10  -29.00000  -32.00000  10.3%  11.6  980s\n",
      " 8913650 1392143  -30.61248   84   17  -29.00000  -32.00000  10.3%  11.6  985s\n",
      " 8956046 1400054  -31.50000   57   26  -29.00000  -32.00000  10.3%  11.6  990s\n",
      " 8994038 1404933  -30.00000   59    4  -29.00000  -31.99998  10.3%  11.6  995s\n",
      " 9039513 1402256  -31.97505   65   34  -29.00000  -31.98517  10.3%  11.6 1000s\n",
      " 9086457 1399253 infeasible   66       -29.00000  -31.97027  10.2%  11.6 1005s\n",
      " 9132076 1395493  -31.95404   60   12  -29.00000  -31.95443  10.2%  11.6 1010s\n",
      " 9171489 1392124     cutoff   67       -29.00000  -31.94103  10.1%  11.6 1015s\n",
      " 9209786 1389474  -30.86622   58   18  -29.00000  -31.92933  10.1%  11.6 1020s\n",
      " 9253513 1386693     cutoff   72       -29.00000  -31.91602  10.1%  11.7 1025s\n",
      " 9297198 1385244     cutoff   68       -29.00000  -31.90476  10.0%  11.7 1030s\n",
      " 9343643 1383580  -31.57781   79   36  -29.00000  -31.89375  10.0%  11.7 1035s\n",
      " 9384944 1381856  -30.88967   65   11  -29.00000  -31.88474  9.95%  11.7 1040s\n",
      " 9430738 1379464  -30.60294   65   15  -29.00000  -31.87413  9.91%  11.7 1045s\n",
      " 9469211 1377111 infeasible   72       -29.00000  -31.86511  9.88%  11.7 1050s\n",
      " 9515255 1374442  -31.71941   92   25  -29.00000  -31.85427  9.84%  11.7 1055s\n",
      " 9556423 1371385 infeasible   53       -29.00000  -31.84539  9.81%  11.7 1060s\n",
      " 9600423 1368406     cutoff   67       -29.00000  -31.83649  9.78%  11.7 1065s\n",
      " 9646356 1364443  -31.82596   61    8  -29.00000  -31.82620  9.75%  11.7 1070s\n",
      " 9694592 1359660  -31.62473   72   27  -29.00000  -31.81456  9.71%  11.7 1075s\n",
      " 9737305 1355605 infeasible   57       -29.00000  -31.80423  9.67%  11.7 1080s\n",
      " 9781708 1351613  -30.56914   77   20  -29.00000  -31.79514  9.64%  11.7 1085s\n",
      " 9827809 1346332 infeasible   69       -29.00000  -31.78501  9.60%  11.7 1090s\n",
      " 9878706 1339900  -30.02654   58    6  -29.00000  -31.77383  9.56%  11.7 1095s\n",
      " 9928825 1333700 infeasible   74       -29.00000  -31.76232  9.53%  11.7 1100s\n",
      " 9976057 1327116  -30.00000   72    9  -29.00000  -31.75040  9.48%  11.7 1105s\n",
      " 10018078 1323440 infeasible   59       -29.00000  -31.74189  9.45%  11.7 1110s\n",
      " 10061696 1316312     cutoff   71       -29.00000  -31.72958  9.41%  11.7 1115s\n",
      " 10110819 1307908 infeasible   87       -29.00000  -31.71555  9.36%  11.7 1120s\n",
      " 10148372 1301596  -31.39399   65    9  -29.00000  -31.70502  9.33%  11.7 1125s\n",
      " 10192261 1293992     cutoff   67       -29.00000  -31.69276  9.29%  11.7 1130s\n",
      " 10239759 1285931 infeasible   64       -29.00000  -31.68019  9.24%  11.7 1135s\n",
      " 10290767 1276758  -31.00000   60   17  -29.00000  -31.66667  9.20%  11.7 1140s\n",
      " 10332652 1272494  -31.00000   62   11  -29.00000  -31.65893  9.17%  11.7 1145s\n",
      " 10372442 1265274 infeasible   74       -29.00000  -31.64784  9.13%  11.7 1150s\n",
      " 10415766 1255816  -30.58386   59   20  -29.00000  -31.63431  9.08%  11.7 1155s\n",
      " 10458005 1245539  -31.45791   70   12  -29.00000  -31.61905  9.03%  11.7 1160s\n",
      " 10500946 1236666 infeasible   53       -29.00000  -31.60583  8.99%  11.7 1165s\n",
      " 10549314 1227260 infeasible   79       -29.00000  -31.59252  8.94%  11.7 1170s\n",
      " 10590403 1217115     cutoff   59       -29.00000  -31.57905  8.89%  11.7 1175s\n",
      " 10639735 1204297     cutoff   67       -29.00000  -31.56218  8.84%  11.7 1180s\n",
      " 10688822 1192004  -30.86710   79   21  -29.00000  -31.54694  8.78%  11.7 1185s\n",
      " 10736833 1177902  -30.00000   68    6  -29.00000  -31.52934  8.72%  11.7 1190s\n",
      " 10782397 1163785     cutoff   64       -29.00000  -31.51072  8.66%  11.7 1195s\n",
      " 10830119 1143176 infeasible   63       -29.00000  -31.50000  8.62%  11.8 1200s\n",
      " 10867816 1146103  -31.00000   78   26  -29.00000  -31.50000  8.62%  11.8 1205s\n",
      " 10908359 1148506 infeasible   65       -29.00000  -31.50000  8.62%  11.8 1210s\n",
      " 10946255 1148535     cutoff   73       -29.00000  -31.49894  8.62%  11.8 1215s\n",
      " 10997457 1132135  -30.78270   63   18  -29.00000  -31.47669  8.54%  11.8 1220s\n",
      " 11048406 1114913  -30.00000   88   17  -29.00000  -31.45209  8.46%  11.8 1225s\n",
      " 11098602 1097294 infeasible   69       -29.00000  -31.42641  8.37%  11.8 1230s\n",
      " 11152176 1078142     cutoff   70       -29.00000  -31.39927  8.27%  11.8 1235s\n",
      " 11202202 1059658 infeasible   66       -29.00000  -31.37095  8.18%  11.8 1240s\n",
      " 11252978 1038987 infeasible   71       -29.00000  -31.33977  8.07%  11.8 1245s\n",
      " 11304067 1024560 infeasible   73       -29.00000  -31.31569  7.99%  11.8 1250s\n",
      " 11356732 1000619  -30.53994   91    8  -29.00000  -31.27371  7.84%  11.8 1255s\n",
      " 11408135 978316  -30.53238   66   16  -29.00000  -31.23199  7.70%  11.8 1260s\n",
      " 11458865 953105     cutoff   68       -29.00000  -31.18060  7.52%  11.8 1265s\n",
      " 11513993 923873  -30.17932   79   13  -29.00000  -31.11679  7.30%  11.8 1270s\n",
      " 11570719 894363 infeasible   56       -29.00000  -31.04197  7.04%  11.8 1275s\n",
      " 11621973 862210  -30.00000   70   10  -29.00000  -31.00118  6.90%  11.8 1280s\n",
      " 11668902 845841 infeasible   61       -29.00000  -31.00000  6.90%  11.8 1285s\n",
      " 11723519 838990 infeasible   75       -29.00000  -31.00000  6.90%  11.8 1290s\n",
      " 11770916 833156     cutoff   76       -29.00000  -31.00000  6.90%  11.8 1295s\n",
      " 11822429 827247  -30.78037   66    8  -29.00000  -31.00000  6.90%  11.8 1300s\n",
      " 11874506 821129  -31.00000   77    6  -29.00000  -31.00000  6.90%  11.8 1305s\n",
      " 11922312 818000  -30.68836   72    8  -29.00000  -31.00000  6.90%  11.8 1310s\n",
      " 11968288 814290 infeasible   65       -29.00000  -31.00000  6.90%  11.8 1315s\n",
      " 12020105 809947  -30.08703   68    4  -29.00000  -31.00000  6.90%  11.8 1320s\n",
      " 12070403 806440  -30.18791   61    6  -29.00000  -31.00000  6.90%  11.8 1325s\n",
      " 12117604 801314 infeasible   63       -29.00000  -31.00000  6.90%  11.8 1330s\n",
      " 12174069 794952 infeasible   63       -29.00000  -31.00000  6.90%  11.8 1335s\n",
      " 12225222 791622  -31.00000   60    9  -29.00000  -31.00000  6.90%  11.8 1340s\n",
      " 12272164 789065  -30.40274   75   11  -29.00000  -31.00000  6.90%  11.8 1345s\n",
      " 12323246 786420  -31.00000   73    8  -29.00000  -31.00000  6.90%  11.8 1350s\n",
      " 12369750 783566 infeasible   66       -29.00000  -31.00000  6.90%  11.8 1355s\n",
      " 12413360 780648 infeasible   76       -29.00000  -31.00000  6.90%  11.8 1360s\n",
      " 12466552 777574  -30.62076   71   12  -29.00000  -31.00000  6.90%  11.8 1365s\n",
      " 12517118 773516  -30.00000   70    6  -29.00000  -31.00000  6.90%  11.8 1370s\n",
      " 12567107 770035  -31.00000   54    8  -29.00000  -31.00000  6.90%  11.8 1375s\n",
      " 12612897 767701 infeasible   67       -29.00000  -31.00000  6.90%  11.8 1380s\n",
      " 12656755 765554  -30.75132   88   12  -29.00000  -31.00000  6.90%  11.8 1385s\n",
      " 12701732 762566  -30.59670   65   10  -29.00000  -31.00000  6.90%  11.8 1390s\n",
      " 12747994 759794 infeasible   78       -29.00000  -31.00000  6.90%  11.8 1395s\n",
      " 12798182 756583  -31.00000   60    4  -29.00000  -31.00000  6.90%  11.8 1400s\n",
      " 12839423 754981  -31.00000   64    8  -29.00000  -31.00000  6.90%  11.8 1405s\n",
      " 12888925 752923     cutoff   85       -29.00000  -31.00000  6.90%  11.8 1410s\n",
      " 12927582 750980  -30.75797   75   16  -29.00000  -31.00000  6.90%  11.8 1415s\n",
      " 12973378 748766     cutoff   69       -29.00000  -31.00000  6.90%  11.8 1420s\n",
      " 13023037 745927 infeasible   67       -29.00000  -31.00000  6.90%  11.8 1425s\n",
      " 13065610 743659 infeasible   69       -29.00000  -31.00000  6.90%  11.8 1430s\n",
      " 13115060 740859  -30.37995   59    8  -29.00000  -31.00000  6.90%  11.8 1435s\n",
      " 13159400 738655  -31.00000   58   13  -29.00000  -31.00000  6.90%  11.8 1440s\n",
      " 13208771 736522 infeasible   66       -29.00000  -31.00000  6.90%  11.8 1445s\n",
      " 13258286 734658 infeasible   69       -29.00000  -31.00000  6.90%  11.8 1450s\n",
      " 13301003 733441 infeasible   67       -29.00000  -31.00000  6.90%  11.8 1455s\n",
      " 13346896 732456 infeasible   71       -29.00000  -31.00000  6.90%  11.8 1460s\n",
      " 13390648 731187  -30.37012   66    9  -29.00000  -31.00000  6.90%  11.8 1465s\n",
      " 13434041 729815  -31.00000   62    8  -29.00000  -31.00000  6.90%  11.8 1470s\n",
      " 13478320 728616  -31.00000   59    4  -29.00000  -31.00000  6.90%  11.8 1475s\n",
      " 13521502 727307  -31.00000   67    9  -29.00000  -31.00000  6.90%  11.8 1480s\n",
      " 13562142 726409     cutoff   66       -29.00000  -31.00000  6.90%  11.8 1485s\n",
      " 13610135 725072  -30.00000   70   14  -29.00000  -31.00000  6.90%  11.8 1490s\n",
      " 13654391 724425  -30.95533   76   19  -29.00000  -31.00000  6.90%  11.8 1495s\n",
      " 13696251 723919  -30.00000   72    8  -29.00000  -31.00000  6.90%  11.8 1500s\n",
      " 13744226 723052  -31.00000   62    4  -29.00000  -31.00000  6.90%  11.8 1505s\n",
      " 13770309 722653 infeasible   80       -29.00000  -31.00000  6.90%  11.8 1510s\n",
      " 13773852 722539  -31.00000   83   16  -29.00000  -31.00000  6.90%  11.8 1523s\n",
      " 13778399 722472  -30.55587   73   10  -29.00000  -31.00000  6.90%  11.8 1539s\n",
      " 13782995 722412 infeasible   69       -29.00000  -31.00000  6.90%  11.8 1555s\n",
      " 13787650 722326 infeasible   66       -29.00000  -31.00000  6.90%  11.8 1571s\n",
      " 13792103 722256 infeasible   61       -29.00000  -31.00000  6.90%  11.8 1585s\n",
      " 13796650 722051  -30.79037   85    6  -29.00000  -31.00000  6.90%  11.8 1599s\n",
      " 13799857 721952  -31.00000   66    9  -29.00000  -31.00000  6.90%  11.8 1615s\n",
      " 13804580 721854  -30.00000   70   12  -29.00000  -31.00000  6.90%  11.8 1630s\n",
      " 13808989 721630 infeasible   70       -29.00000  -31.00000  6.90%  11.8 1645s\n",
      " 13813314 721532  -30.13891   77   10  -29.00000  -31.00000  6.90%  11.8 1660s\n",
      " 13817850 721457 infeasible   86       -29.00000  -31.00000  6.90%  11.8 1675s\n",
      " 13822376 721411  -30.80148   54   10  -29.00000  -31.00000  6.90%  11.8 1690s\n",
      " 13825924 721183 infeasible   58       -29.00000  -31.00000  6.90%  11.8 1705s\n",
      " 13830342 721159 infeasible   74       -29.00000  -31.00000  6.90%  11.8 1721s\n",
      " 13835266 720969     cutoff   64       -29.00000  -31.00000  6.90%  11.8 1737s\n",
      " 13839855 720912  -30.00000   86   22  -29.00000  -31.00000  6.90%  11.8 1751s\n",
      " 13844254 720739  -30.99513   83   34  -29.00000  -31.00000  6.90%  11.8 1766s\n",
      " 13848296 720648  -31.00000   59    4  -29.00000  -31.00000  6.90%  11.8 1782s\n",
      " 13852917 720524  -31.00000   60    6  -29.00000  -31.00000  6.90%  11.8 1796s\n",
      " 13857334 720418  -31.00000   69    8  -29.00000  -31.00000  6.90%  11.8 1811s\n",
      " 13861355 720282 infeasible   79       -29.00000  -31.00000  6.90%  11.8 1825s\n",
      " 13865752 720211     cutoff   65       -29.00000  -31.00000  6.90%  11.8 1840s\n",
      " 13870071 720171 infeasible   73       -29.00000  -31.00000  6.90%  11.8 1854s\n",
      " 13874589 720073  -31.00000   63    4  -29.00000  -31.00000  6.90%  11.8 1867s\n",
      " 13878439 720028 infeasible   70       -29.00000  -31.00000  6.90%  11.8 1881s\n",
      " 13882951 719970 infeasible   76       -29.00000  -31.00000  6.90%  11.8 1897s\n",
      " 13887407 719921  -30.00000   70    6  -29.00000  -31.00000  6.90%  11.8 1913s\n",
      " 13891843 719823  -31.00000   73   11  -29.00000  -31.00000  6.90%  11.8 1926s\n",
      " 13895890 719705 infeasible   78       -29.00000  -31.00000  6.90%  11.8 1940s\n",
      " 13899766 719659 infeasible   63       -29.00000  -31.00000  6.90%  11.8 1950s\n",
      " 13934240 718879  -30.00000   78    9  -29.00000  -31.00000  6.90%  11.8 1955s\n",
      " 13977896 717898 infeasible   58       -29.00000  -31.00000  6.90%  11.8 1960s\n",
      " 14016742 717152  -30.66930   68   33  -29.00000  -31.00000  6.90%  11.8 1965s\n",
      " 14062302 716339  -30.64038   72   13  -29.00000  -31.00000  6.90%  11.8 1970s\n",
      " 14109898 715349 infeasible   66       -29.00000  -31.00000  6.90%  11.8 1975s\n",
      " 14156174 714209  -30.07901   88   28  -29.00000  -31.00000  6.90%  11.8 1980s\n",
      " 14203386 713084     cutoff   77       -29.00000  -31.00000  6.90%  11.8 1985s\n",
      " 14245192 712212  -31.00000   65   10  -29.00000  -31.00000  6.90%  11.8 1990s\n",
      " 14287046 711203 infeasible   64       -29.00000  -31.00000  6.90%  11.8 1995s\n",
      " 14333326 710059  -30.95427   67   26  -29.00000  -31.00000  6.90%  11.8 2000s\n",
      " 14375127 709109  -30.00000   71    4  -29.00000  -31.00000  6.90%  11.8 2005s\n",
      " 14421451 708489  -30.88545   62   11  -29.00000  -31.00000  6.90%  11.8 2010s\n",
      " 14467296 707371  -31.00000   62    6  -29.00000  -31.00000  6.90%  11.8 2015s\n",
      " 14512703 706028  -30.68388   66   12  -29.00000  -31.00000  6.90%  11.8 2020s\n",
      " 14554360 705101  -30.59432   64   14  -29.00000  -31.00000  6.90%  11.8 2025s\n",
      " 14599651 703969  -30.00000   60    7  -29.00000  -31.00000  6.90%  11.8 2030s\n",
      " 14645699 702243     cutoff  103       -29.00000  -31.00000  6.90%  11.8 2035s\n",
      " 14690766 700893     cutoff   67       -29.00000  -31.00000  6.90%  11.8 2040s\n",
      " 14733293 699598     cutoff   77       -29.00000  -31.00000  6.90%  11.8 2045s\n",
      " 14771362 698996  -30.00000   81    4  -29.00000  -31.00000  6.90%  11.8 2050s\n",
      " 14815699 697906  -30.00000   74    4  -29.00000  -31.00000  6.90%  11.9 2055s\n",
      " 14856684 696841 infeasible   71       -29.00000  -31.00000  6.90%  11.9 2060s\n",
      " 14906336 695273 infeasible   74       -29.00000  -31.00000  6.90%  11.9 2065s\n",
      " 14951395 694044  -31.00000   62    6  -29.00000  -31.00000  6.90%  11.9 2070s\n",
      " 14994722 692328 infeasible   64       -29.00000  -31.00000  6.90%  11.9 2075s\n",
      " 15028764 691159  -30.00000   61    8  -29.00000  -31.00000  6.90%  11.9 2080s\n",
      " 15056644 690154  -30.00000   73    7  -29.00000  -31.00000  6.90%  11.9 2085s\n",
      " 15097233 688754  -31.00000   57    8  -29.00000  -31.00000  6.90%  11.9 2090s\n",
      " 15138534 687493  -31.00000   74    8  -29.00000  -31.00000  6.90%  11.9 2095s\n",
      " 15182585 686352     cutoff   65       -29.00000  -31.00000  6.90%  11.9 2100s\n",
      " 15227124 684719  -30.00000   72    6  -29.00000  -31.00000  6.90%  11.9 2105s\n",
      " 15275792 683557 infeasible   84       -29.00000  -31.00000  6.90%  11.9 2110s\n",
      " 15315891 682382 infeasible   62       -29.00000  -31.00000  6.90%  11.9 2115s\n",
      " 15355352 681231 infeasible   75       -29.00000  -31.00000  6.90%  11.9 2120s\n",
      " 15399264 679999  -31.00000   69    4  -29.00000  -31.00000  6.90%  11.9 2125s\n",
      " 15444109 678860  -30.27115   64    6  -29.00000  -31.00000  6.90%  11.9 2130s\n",
      " 15486979 677990  -30.84019   61   12  -29.00000  -31.00000  6.90%  11.9 2135s\n",
      " 15531438 676529  -31.00000   69    6  -29.00000  -31.00000  6.90%  11.9 2140s\n",
      " 15575141 674903  -30.91842   66   15  -29.00000  -31.00000  6.90%  11.9 2145s\n",
      " 15617382 673441  -31.00000   69    6  -29.00000  -31.00000  6.90%  11.9 2150s\n",
      " 15657816 672368  -30.51551   73   13  -29.00000  -31.00000  6.90%  11.9 2155s\n",
      " 15705736 671272  -30.00000   73   10  -29.00000  -31.00000  6.90%  11.9 2160s\n",
      " 15748267 669978     cutoff   69       -29.00000  -31.00000  6.90%  11.9 2165s\n",
      " 15791932 668401  -30.89756   60   18  -29.00000  -31.00000  6.90%  11.9 2170s\n",
      " 15826204 667469  -30.93324   52   18  -29.00000  -31.00000  6.90%  11.9 2175s\n",
      " 15871420 666384  -30.66196   72   12  -29.00000  -31.00000  6.90%  11.9 2180s\n",
      " 15916446 664428  -30.79668   85   25  -29.00000  -31.00000  6.90%  11.9 2185s\n",
      " 15955793 663255  -30.43143   68    6  -29.00000  -31.00000  6.90%  11.9 2190s\n",
      " 15997841 662259  -30.53714   80    9  -29.00000  -31.00000  6.90%  11.9 2195s\n",
      " 16041283 661191 infeasible   65       -29.00000  -31.00000  6.90%  11.9 2200s\n",
      " 16083742 659847  -30.00000   70    4  -29.00000  -31.00000  6.90%  11.9 2205s\n",
      " 16124593 658258 infeasible   73       -29.00000  -31.00000  6.90%  11.9 2210s\n",
      " 16163459 656936  -31.00000   78    7  -29.00000  -31.00000  6.90%  11.9 2215s\n",
      " 16203487 656063 infeasible   66       -29.00000  -31.00000  6.90%  11.9 2220s\n",
      " 16244913 654926 infeasible   74       -29.00000  -31.00000  6.90%  11.9 2225s\n",
      " 16287488 653232 infeasible   62       -29.00000  -31.00000  6.90%  11.9 2230s\n",
      " 16329694 652151 infeasible   62       -29.00000  -31.00000  6.90%  11.9 2235s\n",
      " 16371913 652601  -31.00000   48   11  -29.00000  -31.00000  6.90%  11.9 2240s\n",
      " 16409936 654272     cutoff   80       -29.00000  -31.00000  6.90%  11.9 2245s\n",
      " 16452582 654901     cutoff   59       -29.00000  -31.00000  6.90%  11.9 2250s\n",
      " 16497898 651134 infeasible   85       -29.00000  -30.99287  6.87%  11.9 2255s\n",
      " 16544097 639489  -30.00000   68    8  -29.00000  -30.96858  6.79%  11.9 2260s\n",
      " 16591551 625726  -30.81197   84   21  -29.00000  -30.93781  6.68%  11.9 2265s\n",
      " 16643987 611370  -30.79390   63   21  -29.00000  -30.90997  6.59%  11.9 2270s\n",
      " 16692921 598427     cutoff   67       -29.00000  -30.88896  6.51%  11.9 2275s\n",
      " 16747990 581505 infeasible  109       -29.00000  -30.86183  6.42%  11.9 2280s\n",
      " 16794426 565272     cutoff   90       -29.00000  -30.83692  6.33%  11.9 2285s\n",
      " 16845068 544855  -30.00000   74    4  -29.00000  -30.80367  6.22%  11.9 2290s\n",
      " 16897909 521813     cutoff   78       -29.00000  -30.76671  6.09%  11.9 2295s\n",
      " 16945694 499409     cutoff   94       -29.00000  -30.72506  5.95%  11.9 2300s\n",
      " 16993757 474225     cutoff   70       -29.00000  -30.67272  5.77%  11.9 2305s\n",
      " 17047579 445937 infeasible   74       -29.00000  -30.60344  5.53%  11.9 2310s\n",
      " 17098009 413086  -30.50961   61   15  -29.00000  -30.51459  5.22%  11.9 2315s\n",
      " 17144987 400504  -30.00000   68    6  -29.00000  -30.49821  5.17%  11.9 2320s\n",
      " 17208093 352819  -30.00000   54   14  -29.00000  -30.28155  4.42%  11.9 2325s\n",
      " 17261255 314563  -30.00000   70    8  -29.00000  -30.00000  3.45%  11.9 2330s\n",
      " 17309661 296766  -30.00000   75   11  -29.00000  -30.00000  3.45%  11.9 2335s\n",
      " 17350853 283274  -30.00000   56    8  -29.00000  -30.00000  3.45%  11.9 2340s\n",
      " 17393383 269631     cutoff   65       -29.00000  -30.00000  3.45%  11.9 2345s\n",
      " 17435403 255481  -30.00000   75    9  -29.00000  -30.00000  3.45%  11.9 2350s\n",
      " 17480781 241916     cutoff   61       -29.00000  -30.00000  3.45%  11.9 2355s\n",
      " 17516941 230997  -30.00000   75    6  -29.00000  -30.00000  3.45%  11.9 2360s\n",
      " 17558444 219538     cutoff   70       -29.00000  -30.00000  3.45%  11.9 2365s\n",
      " 17603188 206450  -30.00000   96    6  -29.00000  -30.00000  3.45%  11.9 2370s\n",
      " 17651314 192841  -30.00000   68   13  -29.00000  -30.00000  3.45%  11.9 2375s\n",
      " 17698251 178912  -30.00000   68   11  -29.00000  -30.00000  3.45%  11.9 2380s\n",
      " 17746268 166397     cutoff   74       -29.00000  -30.00000  3.45%  11.9 2385s\n",
      " 17790489 157362  -30.00000   84   10  -29.00000  -30.00000  3.45%  11.9 2390s\n",
      " 17834689 147408  -30.00000   69    6  -29.00000  -30.00000  3.45%  11.9 2395s\n",
      " 17877332 138598     cutoff   84       -29.00000  -30.00000  3.45%  11.9 2400s\n",
      " 17921804 129516 infeasible   65       -29.00000  -30.00000  3.45%  11.9 2405s\n",
      " 17965336 121135  -30.00000   59    4  -29.00000  -30.00000  3.45%  11.9 2410s\n",
      " 18008869 112014     cutoff   81       -29.00000  -30.00000  3.45%  11.9 2415s\n",
      " 18051855 103080  -30.00000   63    8  -29.00000  -30.00000  3.45%  11.9 2420s\n",
      " 18094769 94118 infeasible   76       -29.00000  -30.00000  3.45%  11.9 2425s\n",
      " 18138624 84933 infeasible   68       -29.00000  -30.00000  3.45%  11.9 2430s\n",
      " 18182214 75053  -30.00000   80    9  -29.00000  -30.00000  3.45%  11.9 2435s\n",
      " 18221455 66404  -30.00000   75    8  -29.00000  -30.00000  3.45%  11.9 2440s\n",
      " 18262892 57943  -30.00000   75    4  -29.00000  -30.00000  3.45%  11.9 2445s\n",
      " 18297730 51672     cutoff   85       -29.00000  -30.00000  3.45%  11.9 2450s\n",
      " 18331341 45699 infeasible   78       -29.00000  -30.00000  3.45%  11.9 2455s\n",
      " 18349392 42354     cutoff   72       -29.00000  -30.00000  3.45%  11.9 2460s\n",
      " 18369711 38588     cutoff   58       -29.00000  -30.00000  3.45%  11.9 2465s\n",
      " 18392995 34502  -30.00000   75    4  -29.00000  -30.00000  3.45%  11.9 2470s\n",
      " 18421687 29588 infeasible   68       -29.00000  -30.00000  3.45%  11.9 2475s\n",
      " 18444677 25401  -30.00000   60    9  -29.00000  -30.00000  3.45%  11.9 2480s\n",
      " 18467500 20908     cutoff   75       -29.00000  -30.00000  3.45%  11.9 2485s\n",
      " 18486719 17085 infeasible   86       -29.00000  -30.00000  3.45%  11.9 2490s\n",
      " 18508761 13219     cutoff   72       -29.00000  -30.00000  3.45%  11.9 2495s\n",
      " 18531022  9333  -30.00000   60    8  -29.00000  -30.00000  3.45%  11.9 2500s\n",
      " 18551209  5060     cutoff   88       -29.00000  -30.00000  3.45%  11.9 2505s\n",
      " 18579278   357     cutoff   72       -29.00000  -30.00000  3.45%  11.9 2510s\n",
      "\n",
      "Cutting planes:\n",
      "  Gomory: 47\n",
      "  Cover: 2\n",
      "  Projected implied bound: 6\n",
      "  Clique: 10\n",
      "  MIR: 6\n",
      "  StrongCG: 2\n",
      "  Flow cover: 16\n",
      "  Zero half: 6\n",
      "\n",
      "Explored 18582402 nodes (221669439 simplex iterations) in 2510.49 seconds (4919.22 work units)\n",
      "Thread count was 8 (of 8 available processors)\n",
      "\n",
      "Solution count 10: -29 -29 -28 ... -18\n",
      "No other solutions better than -29\n",
      "\n",
      "Optimal solution found (tolerance 1.00e-04)\n",
      "Best objective -2.900000000000e+01, best bound -2.900000000000e+01, gap 0.0000%\n",
      "\n",
      "---------------------------------------------------------------------------\n",
      "Multi-objectives: solved in 2510.50 seconds (4919.22 work units), solution count 10\n",
      "\n"
     ]
    }
   ],
   "source": [
    "m.optimize()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "22b2ee1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "vals = m.getAttr('x', vars)\n",
    "t = m.getAttr('x', t)\n",
    "\n",
    "selected = gp.tuplelist((i, j) for i, j in vals.keys() if vals[i, j] > 0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b01838e3",
   "metadata": {},
   "source": [
    "-------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0871925b",
   "metadata": {},
   "source": [
    "## Reward Total"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "c0b44e22",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Reward:  78.0\n"
     ]
    }
   ],
   "source": [
    "# Find Total Reward of Route\n",
    "total = 0\n",
    "for i in capitals_minus:\n",
    "    total = total + (ride_stop[i].X* reward[i])\n",
    "    \n",
    "print('Total Reward: ', total)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55f45256",
   "metadata": {},
   "source": [
    "-------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cfc5e21e",
   "metadata": {},
   "source": [
    "## Walking Distance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "1d04e9a0",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total miles walked:  2.3772529521441887\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/40/khdb0r0d62q_c42_9lq8c1cc0000gn/T/ipykernel_893/830130446.py:7: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  d[i] = temp/1000\n"
     ]
    }
   ],
   "source": [
    "d = distance_matrix['Distance Walk'] # add to data fram\n",
    "\n",
    "# Change enteries in meters to km\n",
    "for i in range(0,1225):\n",
    "    if d[i] >= 1.0:\n",
    "        temp = d[i]\n",
    "        d[i] = temp/1000\n",
    "        \n",
    "distance_matrix['Distance Walk'] = d # add to data fram\n",
    "\n",
    "# convert to dictionary\n",
    "walk = {(row['Origin'], row['Destination']): row['Distance Walk'] for _, row in distance_matrix.iterrows()}\n",
    "\n",
    "# Find total walking distance\n",
    "total = 0\n",
    "for i, j in dist.keys():\n",
    "    total = total + walk[i,j]*vals[i,j]\n",
    "\n",
    "# Convert to Miles\n",
    "miles = total/1.609\n",
    "\n",
    "print('Total miles walked: ', miles)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24aa7a27",
   "metadata": {},
   "source": [
    "-------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eeb8d3b0",
   "metadata": {},
   "source": [
    "## Find Full Path"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "64dd8e67",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Entrance',\n",
       " 'Pirates of the Caribbean 1',\n",
       " 'Indiana Jones Adventure 2',\n",
       " 'Pirates of the Caribbean 2',\n",
       " 'Indiana Jones Adventure 1',\n",
       " 'Big Thunder Mountain Railway 1',\n",
       " 'The Golden Horseshoe - L',\n",
       " 'Big Thunder Mountain Railway 2',\n",
       " 'Star Wars: Rise of Resistance 2',\n",
       " 'Splash Mountain 1',\n",
       " 'Star Wars: Rise of Resistance 1',\n",
       " 'Its a Small World 2',\n",
       " 'Troubadour Tavern - D',\n",
       " 'Its a Small World 1',\n",
       " 'Matterhorn Bobsleds 1',\n",
       " 'Space Mountain 1',\n",
       " 'Fireworks',\n",
       " 'Space Mountain 2',\n",
       " 'Exit']"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# find path not including Entrance and Exit\n",
    "visited = {}\n",
    "\n",
    "for i in capitals_food:\n",
    "    visited[i] = 0\n",
    "\n",
    "# Start at Entrance\n",
    "path = []\n",
    "path.append('Entrance')\n",
    "visited['Entrance'] = 1\n",
    "\n",
    "\n",
    "# Where to go from Entrance\n",
    "for i in capitals_food:\n",
    "        if vals['Entrance', i] == 1:\n",
    "            visited[i] = 1\n",
    "            path.append(i)\n",
    "            break\n",
    "\n",
    "# Continue from Entrance on path\n",
    "while len(path) < 19:\n",
    "    index = len(path) - 1\n",
    "    temp = path[index]\n",
    "    for i in capitals_food:\n",
    "        if visited[i] == 0:\n",
    "             if vals[temp, i] == 1:\n",
    "                visited[i] = 1\n",
    "                path.append(i)\n",
    "path"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e54a75d",
   "metadata": {},
   "source": [
    "-------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a066c51b",
   "metadata": {},
   "source": [
    "## Itenerary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "2ad6c9d3",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Entrance': '8:00 am',\n",
       " 'Pirates of the Caribbean 1': '8:05 am',\n",
       " 'Indiana Jones Adventure 2': '8:39 am',\n",
       " 'Pirates of the Caribbean 2': '9:33 am',\n",
       " 'Indiana Jones Adventure 1': '10:07 am',\n",
       " 'Big Thunder Mountain Railway 1': '11:02 am',\n",
       " 'The Golden Horseshoe - L': '11:40 am',\n",
       " 'Big Thunder Mountain Railway 2': '12:26 pm',\n",
       " 'Star Wars: Rise of Resistance 2': '1:08 pm',\n",
       " 'Splash Mountain 1': '3:10 pm',\n",
       " 'Star Wars: Rise of Resistance 1': '4:06 pm',\n",
       " 'Its a Small World 2': '6:12 pm',\n",
       " 'Troubadour Tavern - D': '6:41 pm',\n",
       " 'Its a Small World 1': '7:47 pm',\n",
       " 'Matterhorn Bobsleds 1': '8:17 pm',\n",
       " 'Space Mountain 1': '9:02 pm',\n",
       " 'Fireworks': '10:00 pm',\n",
       " 'Space Mountain 2': '11:00 pm',\n",
       " 'Exit': '12:00 pm'}"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# [Timestamp] Print out the timestamp that a guest arrives at each ride on the route\n",
    "import datetime\n",
    "\n",
    "timestamp = {}\n",
    "\n",
    "for i in t:\n",
    "    time = t[i] + 8*60 #gets zero to be 8am\n",
    "    # Calculate PM times\n",
    "    if time > 720:\n",
    "        half = \"pm\"\n",
    "        hour, minutes = divmod(time, 60)\n",
    "        correct_hour = hour - 12\n",
    "        if correct_hour == 0:\n",
    "            correct_hour = 12\n",
    "    # Calculate AM times\n",
    "    else: \n",
    "        half = \"am\"\n",
    "        correct_hour, minutes = divmod(time, 60)\n",
    "        # format min less than 10 so there is a zero before the number\n",
    "    if minutes < 10:\n",
    "        minutes = '0{min}'.format(min = int(minutes))\n",
    "    else:\n",
    "        minutes = int(minutes)\n",
    "    result = '{hour}:{mins} {xm}'.format(hour = int(correct_hour), mins = minutes, xm = half)\n",
    "    timestamp[i] = result\n",
    "\n",
    "    \n",
    "# [Iternerary] print out the time stamps in order of the path\n",
    "iten = {}\n",
    "\n",
    "for i in path:\n",
    "    iten[i] = timestamp[i]\n",
    "    \n",
    "iten"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d27cff9",
   "metadata": {},
   "source": [
    "-------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f8d8ce4",
   "metadata": {},
   "source": [
    "## Find Path without Entrance or Exit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "24fdd9d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Pirates of the Caribbean 1',\n",
       " 'Indiana Jones Adventure 2',\n",
       " 'Pirates of the Caribbean 2',\n",
       " 'Indiana Jones Adventure 1',\n",
       " 'Big Thunder Mountain Railway 1',\n",
       " 'The Golden Horseshoe - L',\n",
       " 'Big Thunder Mountain Railway 2',\n",
       " 'Star Wars: Rise of Resistance 2',\n",
       " 'Splash Mountain 1',\n",
       " 'Star Wars: Rise of Resistance 1',\n",
       " 'Its a Small World 2',\n",
       " 'Troubadour Tavern - D',\n",
       " 'Its a Small World 1',\n",
       " 'Matterhorn Bobsleds 1',\n",
       " 'Space Mountain 1',\n",
       " 'Fireworks',\n",
       " 'Space Mountain 2']"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# find path not including Entrance and Exit\n",
    "visited = {}\n",
    "\n",
    "for i in capitals_food:\n",
    "    visited[i] = 0\n",
    "\n",
    "# Start at Entrance\n",
    "path = []\n",
    "visited['Entrance'] = 1\n",
    "\n",
    "\n",
    "# Where to go from Entrance\n",
    "for i in capitals_food:\n",
    "        if vals['Entrance', i] == 1:\n",
    "            visited[i] = 1\n",
    "            path.append(i)\n",
    "            break\n",
    "\n",
    "# Continue from Entrance on path\n",
    "while len(path) < 17:\n",
    "    index = len(path) - 1\n",
    "    temp = path[index]\n",
    "    for i in capitals_food:\n",
    "        if visited[i] == 0:\n",
    "             if vals[temp, i] == 1:\n",
    "                visited[i] = 1\n",
    "                path.append(i)\n",
    "path"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16f8b73b",
   "metadata": {},
   "source": [
    "-------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1bcd4b7",
   "metadata": {},
   "source": [
    "# Mapping"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e7bb49d",
   "metadata": {},
   "source": [
    "### Load Coordinates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6cac4fb5",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# create dictionary of latitude and longitude for each ride\n",
    "lat_long = pd.read_csv('Lat_Long_trides.csv',index_col=0)\n",
    "\n",
    "# ride name as key with (lat, long) as values\n",
    "coordinates = {(row['Ride']): (row['Latitude'], row['Longitude']) for _, row in lat_long.iterrows()}\n",
    "\n",
    "# because coordinates are similar, change to slightly different coordinates for marker on map\n",
    "coordinates['Pirates of the Caribbean 1'] = (33.811757, -117.9207289)\n",
    "coordinates['Pirates of the Caribbean 2'] = (33.811757, -117.9207289)\n",
    "coordinates['Exit'] = ((33.809997, -118.9189785))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "05d38c34",
   "metadata": {},
   "source": [
    "### Map Route and Stops"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5d332aca",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Map the route using google maps static maps\n",
    "\n",
    "# [Waypoints] use path to create waypoints that the route must go through\n",
    "waypoints = []\n",
    "\n",
    "for i in path:\n",
    "    waypoints.append(coordinates[i])\n",
    "    \n",
    "    \n",
    "# [Direction] get step by step directions from Entrance to Exit through waypoints\n",
    "results = gmaps.directions(origin = coordinates['Entrance'], destination = coordinates['Entrance'], mode = 'walking', waypoints= waypoints)\n",
    "\n",
    "\n",
    "# [Mapping] Plot on map\n",
    "marker_points = []\n",
    "waypoints = []\n",
    "\n",
    "#extract the location (lat and long) of each turn from the previous directions function\n",
    "for leg in results[0][\"legs\"]:\n",
    "    # adds a marker for each starting waypoint\n",
    "    leg_start_loc = leg[\"start_location\"]\n",
    "    marker_points.append(f'{leg_start_loc[\"lat\"]},{leg_start_loc[\"lng\"]}')\n",
    "    for step in leg[\"steps\"]:\n",
    "        # adds a point for each turn on the way to the next ride on path\n",
    "        end_loc = step[\"end_location\"]\n",
    "        waypoints.append(f'{end_loc[\"lat\"]},{end_loc[\"lng\"]}')\n",
    "# adds a marker for the last ride on path\n",
    "last_stop = results[0][\"legs\"][-1][\"end_location\"]\n",
    "marker_points.append(f'{last_stop[\"lat\"]},{last_stop[\"lng\"]}')\n",
    " \n",
    "# labels all marker points (all rides on path) with a letter\n",
    "markers = [ \"color:red|size:mid|label:\" + chr(65+i) + \"|\" \n",
    "           + r for i, r in enumerate(marker_points)]\n",
    "\n",
    "# Change color of markers and move the second visit to each ride over so it can be seen\n",
    "markers[1] = 'color:purple|size:mid|label:C|33.811357, -117.9207289' # Pirates 1\n",
    "markers[2] = 'color:white|size:mid|label:B|33.8117056,-117.9206731' # Indiana Jones 1\n",
    "markers[3] = 'color:purple|size:mid|label:E|33.811357, -117.9204289'# Pirates 2\n",
    "markers[4] = 'color:white|size:mid|label:D|33.8117056,-117.9203731' # Indiana Jones 2\n",
    "markers[5] = 'color:yellow|size:mid|label:F|33.8124758,-117.9203355' # Big Thunder 1\n",
    "markers[6] = 'color:green|size:mid|label:G|33.8121265,-117.9202446' # LUNCH\n",
    "markers[7] = 'color:yellow|size:mid|label:H|33.8124758,-117.9200355' #Big Thunder 2\n",
    "markers[8] = 'color:black|size:mid|label:I|33.8137067,-117.9231294' # Star Wars 1\n",
    "markers[9] = 'color:red|size:mid|label:J|33.8122899,-117.9224001' # Splash\n",
    "markers[10] = 'color:black|size:mid|label:K|33.8137067,-117.9228294' # Star Wars 2\n",
    "markers[11] = 'color:orange|size:mid|label:L|33.8143046,-117.9178047' # Small World 1\n",
    "markers[12] = 'color:green|size:mid|label:M|33.81455529999999,-117.9187207' # Dinner\n",
    "markers[13] = 'color:orange|size:mid|label:N|33.8143046,-117.9175047' # Small World 2\n",
    "markers[14] = 'color:red|size:mid|label:O|33.8130703, -117.9178203' # Matterhorn\n",
    "markers[15] = 'color:blue|size:mid|label:P|33.8116723,-117.9173565' # Space 1\n",
    "markers[16] = 'color:red|size:mid|label:Q|33.8127953,-117.9189839' # Fireworks\n",
    "markers[17] = 'color:blue|size:mid|label:R|33.8116723,-117.9170565' # Space 2\n",
    "\n",
    "\n",
    "# [Print Map]\n",
    "result_map = gmaps.static_map(\n",
    "                 center = [33.812252236772736, -117.91894201571984],\n",
    "                 scale=2, \n",
    "                 zoom=16.95,\n",
    "                 size=[640, 640], \n",
    "                 format=\"jpg\", \n",
    "                 maptype=\"satellite\",\n",
    "                 markers=markers,\n",
    "                 path=\"geodesic:TRUE|color:0x0000ff|weight:2|\" + \"|\".join(waypoints))\n",
    "\n",
    "# [Save Map]\n",
    "with open('[Thesis]Prioritization_Complication_Map.jpg', 'wb') as img:\n",
    "    for chunk in result_map:\n",
    "        img.write(chunk)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
